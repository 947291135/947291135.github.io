<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试宝典-基础篇</title>
      <link href="/2020/12/03/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2020/12/03/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTML、HTTP、web综合问题"><a href="#一、HTML、HTTP、web综合问题" class="headerlink" title="一、HTML、HTTP、web综合问题"></a>一、HTML、HTTP、web综合问题</h1><h2 id="1-前端需要注意哪些SEO"><a href="#1-前端需要注意哪些SEO" class="headerlink" title="1 前端需要注意哪些SEO"></a>1 前端需要注意哪些SEO</h2><ul><li><p>合理的<code>title</code>、<code>description</code>、<code>keywords</code>：搜索对着三项的权重逐个减小，<code>title</code>值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</p></li><li><p>语义化的<code>HTML</code>代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</p></li><li><p>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</p></li><li><p>重要内容不要用js输出：爬虫不会执行js获取内容</p></li><li><p>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</p></li><li><p>非装饰性图片必须加<code>alt</code></p></li><li><p>提高网站速度：网站速度是搜索引擎排序的一个重要指标</p><h2 id="2-lt-img-gt-的title和alt有什么区别"><a href="#2-lt-img-gt-的title和alt有什么区别" class="headerlink" title="2 &lt;img&gt;的title和alt有什么区别"></a>2 <code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h2></li><li><p>通常当鼠标滑动到元素上的时候显示</p></li><li><p><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</p><h2 id="3-HTTP的几种请求方法用途"><a href="#3-HTTP的几种请求方法用途" class="headerlink" title="3 HTTP的几种请求方法用途"></a>3 HTTP的几种请求方法用途</h2></li><li><p>GET方法</p><ul><li>发送一个请求来取得服务器上的某一资源</li></ul></li><li><p>POST方法</p><ul><li>向URL指定的资源提交数据或附加新的数据</li></ul></li><li><p>PUT方法</p><ul><li>POST方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而POST没有</li></ul></li><li><p>HEAD方法</p><ul><li>只请求页面的首部</li></ul></li><li><p>DELETE方法</p><ul><li>删除服务器上的某资源</li></ul></li><li><p>OPTIONS方法</p><ul><li>它用于获取当前URL所支持的方法。如果请求成功，会有一个Allow的头包含类似“GET,POST”这样的信息</li></ul></li><li><p>TRACE方法</p><ul><li>TRACE方法被用于激发一个远程的，应用层的请求消息回路</li></ul></li><li><p>CONNECT方法</p><ul><li>把请求连接转换到透明的TCP/IP通道<h2 id="4-从浏览器地址栏输入url到显示页面的步骤"><a href="#4-从浏览器地址栏输入url到显示页面的步骤" class="headerlink" title="4 从浏览器地址栏输入url到显示页面的步骤"></a>4 从浏览器地址栏输入url到显示页面的步骤</h2><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3></li></ul></li><li><p>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；</p></li><li><p>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；</p></li><li><p>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数- - 据结构（如HTML的DOM）；</p></li><li><p>载入解析到的资源文件，渲染页面，完成。</p><h3 id="详细版"><a href="#详细版" class="headerlink" title="详细版"></a>详细版</h3></li></ul><ol><li><p>在浏览器地址栏输入URL</p></li><li><p>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p><ol><li>如果资源未缓存，发起新请求</li><li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li><li>检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：<ul><li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li><li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li></ul></li></ol></li><li><p>浏览器解析URL获取协议，主机，端口，path</p></li><li><p>浏览器组装一个HTTP（GET）请求报文</p></li><li><p>浏览器获取主机ip地址，过程如下：</p><ol><li>浏览器缓存</li><li>本机缓存</li><li>hosts文件</li><li>路由器缓存</li><li>ISP DNS缓存</li><li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li></ol></li><li><p>打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：</p><ol><li>客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口</li><li>服务器发回SYN=1， ACK=X+1， Seq=Y的响应包</li><li>客户端发送ACK=Y+1， Seq=Z</li></ol></li><li><p>TCP链接建立后发送HTTP请求</p></li><li><p>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</p></li><li><p>服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码</p></li><li><p>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</p></li><li><p>服务器将响应报文通过TCP连接发送回浏览器</p></li><li><p>浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：</p><ol><li>主动方发送Fin=1， Ack=Z， Seq= X报文</li><li>被动方发送ACK=X+1， Seq=Z报文</li><li>被动方发送Fin=1， ACK=X， Seq=Y报文</li><li>主动方发送ACK=Y， Seq=X报文</li></ol></li><li><p>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</p></li><li><p>如果资源可缓存，进行缓存</p></li><li><p>对响应进行解码（例如gzip压缩）</p></li><li><p>根据资源类型决定如何处理（假设资源为HTML文档）</p></li><li><p>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释</p></li><li><p>构建DOM树：</p><ol><li>Tokenizing：根据HTML规范将字符流解析为标记</li><li>Lexing：词法分析将标记转换为对象并定义属性和规则</li><li>DOM construction：根据HTML标记关系将对象组成DOM树</li></ol></li><li><p>解析过程中遇到图片、样式表、js文件，启动下载</p></li><li><p>构建CSSOM树：</p><ol><li>Tokenizing：字符流转换为标记流</li><li>Node：根据标记创建节点</li><li>CSSOM：节点创建CSSOM树</li></ol></li><li><p>根据DOM树和CSSOM树构建渲染树:</p><ol><li>从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none</li><li>对每一个可见节点，找到恰当的CSSOM规则并应用</li><li>发布可视节点的内容和计算样式</li></ol></li><li><p>js解析如下：</p><ol><li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading</li><li>HTML解析器遇到没有async和defer的script时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</li><li>当解析器遇到设置了async属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用document.write()，它们可以访问自己script和之前的文档元素</li><li>当文档完成解析，document.readState变成interactive</li><li>所有defer脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用document.write()</li><li>浏览器在Document对象上触发DOMContentLoaded事件</li><li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete，window触发load事件</li></ol></li><li><p>显示页面（HTML解析过程中会逐步显示页面）</p><h3 id="详细简版"><a href="#详细简版" class="headerlink" title="详细简版"></a>详细简版</h3></li><li><p>从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</p></li><li><p>开启网络线程到发出一个完整的HTTP请求（这一部分涉及到dns查询，TCP/IP请求，五层因特网协议栈等知识）</p></li><li><p>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</p></li><li><p>后台和前台的HTTP交互（这一部分包括HTTP头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）</p></li><li><p>单独拎出来的缓存问题，HTTP的缓存（这部分包括http缓存头部，ETag，catch-control等）</p></li><li><p>浏览器接收到HTTP数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和DOMContentLoaded等）</p></li><li><p>CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）</p></li><li><p>JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p></li><li><p>其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）</p></li></ol><h2 id="5-如何进行网站性能优化"><a href="#5-如何进行网站性能优化" class="headerlink" title="5 如何进行网站性能优化"></a>5 如何进行网站性能优化</h2><ul><li><p>content方面</p><ul><li>减少HTTP请求：合并文件、CSS精灵、inline Image</li><li>减少DNS查询：DNS缓存、将资源分布到恰当数量的主机名</li><li>减少DOM元素数量</li></ul></li><li><p>Server方面</p><ul><li>使用CDN</li><li>配置ETag</li><li>对组件使用Gzip压缩</li></ul></li><li><p>Cookie方面</p><ul><li>减小cookie大小</li></ul></li><li><p>css方面</p><ul><li>将样式表放到页面顶部</li><li>不使用CSS表达式</li><li>使用<link>不使用@import</li></ul></li><li><p>Javascript方面</p><ul><li>将脚本放到页面底部</li><li>将javascript和css从外部引入</li><li>压缩javascript和css</li><li>删除不需要的脚本</li><li>减少DOM访问</li></ul></li><li><p>图片方面</p><ul><li>优化图片：根据实际颜色需要选择色深、压缩</li><li>优化css精灵</li><li>不要在HTML中拉伸图片<h3 id="你有用过哪些前端性能优化的方法？"><a href="#你有用过哪些前端性能优化的方法？" class="headerlink" title="你有用过哪些前端性能优化的方法？"></a>你有用过哪些前端性能优化的方法？</h3></li></ul></li><li><p>减少http请求次数：CSS Sprites, - JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</p></li><li><p>前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p></li><li><p>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p></li><li><p>当需要设置的样式很多时设置className而不是直接操作style</p></li><li><p>少用全局变量、缓存DOM节点查找的结果。减少IO读取操作</p></li><li><p>避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)</p></li><li><p>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳</p></li><li><p>避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢</p><h3 id="谈谈性能优化问题"><a href="#谈谈性能优化问题" class="headerlink" title="谈谈性能优化问题"></a>谈谈性能优化问题</h3></li><li><p>代码层面：避免使用css表达式，避免使用高级选择器，通配选择器</p></li><li><p>缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等</p></li><li><p>请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载</p></li><li><p>请求带宽：压缩文件，开启GZIP</p><h3 id="前端性能优化最佳实践？"><a href="#前端性能优化最佳实践？" class="headerlink" title="前端性能优化最佳实践？"></a>前端性能优化最佳实践？</h3></li><li><p>性能评级工具（PageSpeed 或 YSlow）</p></li><li><p>合理设置 HTTP 缓存：Expires 与 Cache-control</p></li><li><ul><li>静态资源打包，开启 Gzip 压缩（节省响应流量）</li></ul></li><li><p>CSS3 模拟图像，图标base64（降低请求数）</p></li><li><p>模块延迟(defer)加载/异步(async)加载</p></li><li><p>Cookie 隔离（节省请求流量）</p></li><li><p>localStorage（本地存储）</p></li><li><p>使用 CDN 加速（访问最近服务器）</p></li><li><p>启用 HTTP/2（多路复用，并行加载）</p></li><li><p>前端自动化（gulp/webpack）</p><h2 id="6-HTTP状态码及其含义"><a href="#6-HTTP状态码及其含义" class="headerlink" title="6 HTTP状态码及其含义"></a>6 HTTP状态码及其含义</h2></li><li><p>1XX：信息状态码</p><ul><li>100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li><p>2XX：成功状态码</p><ul><li>200 OK 正常返回信息</li><li>201 Created 请求成功并且服务器创建了新的资源</li><li>202 Accepted 服务器已接受请求，但尚未处理</li></ul></li><li><p>3XX：重定向</p><ul><li>301 Moved Permanently 请求的网页已永久移动到新位置。</li><li>302 Found 临时性重定向。</li><li>303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。</li><li>304 Not Modified 自从上次请求后，请求的网页未修改过。</li></ul></li><li><p>4XX：客户端错误</p><ul><li>400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li>401 Unauthorized 请求未授权。</li><li>403 Forbidden 禁止访问。</li><li>404 Not Found 找不到如何与 URI 相匹配的资源。</li></ul></li><li><p>5XX: 服务器错误</p><ul><li>500 Internal Server Error 最常见的服务器端错误。</li><li>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。<h2 id="7-语义化的理解"><a href="#7-语义化的理解" class="headerlink" title="7 语义化的理解"></a>7 语义化的理解</h2></li></ul></li><li><p>用正确的标签做正确的事情！</p></li><li><p>HTML语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</p></li><li><p>在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的。</p></li><li><p>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。</p></li><li><p>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解<br>##8 介绍一下你对浏览器内核的理解？</p></li><li><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎</p></li><li><p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p></li><li><p>JS引擎则：解析和执行javascript来实现网页的动态效果</p></li><li><p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</p></li></ul><h3 id="常见的浏览器内核有哪些"><a href="#常见的浏览器内核有哪些" class="headerlink" title="常见的浏览器内核有哪些"></a>常见的浏览器内核有哪些</h3><ul><li><p>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]</p></li><li><p>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等</p></li><li><p>Presto内核：Opera7及以上。 [Opera内核原为：Presto，现为：Blink;]</p></li><li><p>Webkit内核：Safari,Chrome等。 [ Chrome的Blink（WebKit的分支）]</p><h2 id="9-html5有哪些新特性、移除了那些元素？"><a href="#9-html5有哪些新特性、移除了那些元素？" class="headerlink" title="9 html5有哪些新特性、移除了那些元素？"></a>9 html5有哪些新特性、移除了那些元素？</h2></li><li><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加</p><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>离线应用 manifest</li><li>桌面通知 Notifications</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li><li>地理位置 Geolocation</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>页面可见性改变事件 visibilitychange</li><li>跨窗口通信 PostMessage</li><li>Form Data 对象</li><li>绘画 canvas</li></ul></li><li><p>移除的元素：</p><ul><li>纯表现的元素：basefont、big、center、font、 s、strike、tt、u</li><li>对可用性产生负面影响的元素：frame、frameset、noframes</li></ul></li><li><p>支持HTML5新标签：</p><ul><li>IE8/IE7/IE6支持通过document.createElement方法产生的标签</li><li>可以利用这一特性让这些浏览器支持HTML5新标签</li><li>浏览器支持新标签后，还需要添加标签默认的样式</li><li>当然也可以直接使用成熟的框架、比如html5shim</li></ul></li></ul><h3 id="如何区分-HTML-和-HTML5"><a href="#如何区分-HTML-和-HTML5" class="headerlink" title="如何区分 HTML 和 HTML5"></a>如何区分 HTML 和 HTML5</h3><ul><li><p>DOCTYPE声明、新增的结构元素、功能元素</p><h2 id="10-HTML5的离线储存怎么使用，工作原理能不能解释一下？"><a href="#10-HTML5的离线储存怎么使用，工作原理能不能解释一下？" class="headerlink" title="10 HTML5的离线储存怎么使用，工作原理能不能解释一下？"></a>10 HTML5的离线储存怎么使用，工作原理能不能解释一下？</h2></li><li><p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</p></li><li><p>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p></li><li><p>如何使用：</p><ul><li>页面头部像下面一样加入一个manifest的属性；</li><li>在cache.manifest文件的编写离线存储的资源</li><li>在离线状态时，操作window.applicationCache进行需求实现</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#v0.11</span><br><span class="line">CACHE:</span><br><span class="line">js&#x2F;app.js</span><br><span class="line">css&#x2F;style.css</span><br><span class="line">NETWORK:</span><br><span class="line">resourse&#x2F;logo.png</span><br><span class="line">FALLBACK:</span><br><span class="line">&#x2F;offline.html</span><br></pre></td></tr></table></figure></div><h2 id="11-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"><a href="#11-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢" class="headerlink" title="11 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"></a>11 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢</h2><ul><li><p>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p></li><li><p>离线的情况下，浏览器就直接使用离线存储的资源。</p></li></ul><h2 id="12-请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#12-请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="12 请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>12 请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h2><ul><li><p>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</p></li><li><p>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</p></li><li><p>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</p></li><li><p>存储大小：</p><ul><li>cookie数据大小不能超过4k</li><li>sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</li></ul></li><li><p>有期时间：</p><ul><li>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li>sessionStorage 数据在当前浏览器窗口关闭后自动删除</li><li>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭<h2 id="13-iframe有那些缺点？"><a href="#13-iframe有那些缺点？" class="headerlink" title="13 iframe有那些缺点？"></a>13 iframe有那些缺点？</h2></li></ul></li><li><p>iframe会阻塞主页面的Onload事件</p></li><li><p>搜索引擎的检索程序无法解读这种页面，不利于SEO</p></li><li><p>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</p></li><li><p>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题</p><h2 id="14-WEB标准以及W3C标准是什么"><a href="#14-WEB标准以及W3C标准是什么" class="headerlink" title="14 WEB标准以及W3C标准是什么?"></a>14 WEB标准以及W3C标准是什么?</h2></li><li><p>标签闭合、标签小写、不乱嵌套、使用外链css和js、结构行为表现的分离</p><h2 id="15-xhtml和html有什么区别"><a href="#15-xhtml和html有什么区别" class="headerlink" title="15 xhtml和html有什么区别?"></a>15 xhtml和html有什么区别?</h2></li><li><p>一个是功能上的差别</p><ul><li>主要是XHTML可兼容各大浏览器、手机以及PDA，并且浏览器也能快速正确地编译网页</li></ul></li><li><p>另外是书写习惯的差别</p><ul><li>XHTML 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li></ul></li></ul><h2 id="16-Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#16-Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="16 Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>16 <code>Doctype</code>作用? 严格模式与混杂模式如何区分？它们有何意义?</h2><ul><li>页面被加载的时，<code>link</code>会同时被加载，而@imort页面被加载的时，<code>link</code>会同时被加载，而<code>@import</code>引用的CSS会等到页面被加载完再加载 <code>import</code>只在<code>IE5</code>以上才能识别，而<code>link</code>是<code>XHTML</code>标签，无兼容问题 <code>link</code>方式的样式的权重 高于<code>@import</code>的权重</li><li><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器， 用什么文档类型 规范来解析这个文档</li><li>严格模式的排版和 <code>JS</code> 运作模式是 以该浏览器支持的最高标准运行</li><li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 <code>DOCTYPE</code>不存在或格式不正确会导致文档以混杂模式呈现</li></ul><h2 id="17-行内元素有哪些？块级元素有哪些？空-void-元素有那些？行内元素和块级元素有什么区别？"><a href="#17-行内元素有哪些？块级元素有哪些？空-void-元素有那些？行内元素和块级元素有什么区别？" class="headerlink" title="17 行内元素有哪些？块级元素有哪些？空(void)元素有那些？行内元素和块级元素有什么区别？"></a>17 行内元素有哪些？块级元素有哪些？空(void)元素有那些？行内元素和块级元素有什么区别？</h2><ul><li>行内元素有：<code>a b span img input select strong</code></li><li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4… p</code></li><li>空元素：<code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code></li><li>行内元素不可以设置宽高，不独占一行</li><li>块级元素可以设置宽高，独占一行</li></ul><h2 id="18-HTML全局属性-global-attribute-有哪些"><a href="#18-HTML全局属性-global-attribute-有哪些" class="headerlink" title="18 HTML全局属性(global attribute)有哪些"></a>18 HTML全局属性(global attribute)有哪些</h2><ul><li><code>class</code>:为元素设置类标识</li><li><code>data-*</code>: 为元素增加自定义属性</li><li><code>draggable</code>: 设置元素是否可拖拽</li><li><code>id</code>: 元素<code>id</code>，文档内唯一</li><li><code>lang</code>: 元素内容的的语言</li><li><code>style</code>: 行内<code>css</code>样式</li><li><code>title</code>: 元素相关的建议信息</li></ul><h2 id="19-Canvas和SVG有什么区别？"><a href="#19-Canvas和SVG有什么区别？" class="headerlink" title="19 Canvas和SVG有什么区别？"></a>19 Canvas和SVG有什么区别？</h2><ul><li><code>svg</code>绘制出来的每一个图形的元素都是独立的<code>DOM</code>节点，能够方便的绑定事件或用来修改。<code>canvas</code>输出的是一整幅画布</li><li><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会失真和锯齿。而<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真或者锯齿</li></ul><h2 id="20-HTML5-为什么只需要写"><a href="#20-HTML5-为什么只需要写" class="headerlink" title="20 HTML5 为什么只需要写 "></a>20 HTML5 为什么只需要写 <!DOCTYPE HTML></h2><ul><li><code>HTML5</code> 不基于 <code>SGML</code>，因此不需要对<code>DTD</code>进行引用，但是需要<code>doctype</code>来规范浏览器的行为</li><li>而<code>HTML4.01</code>基于<code>SGML</code>,所以需要对<code>DTD</code>进行引用，才能告知浏览器文档所使用的文档类型</li></ul><h2 id="21-如何在页面上实现一个圆形的可点击区域？"><a href="#21-如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="21 如何在页面上实现一个圆形的可点击区域？"></a>21 如何在页面上实现一个圆形的可点击区域？</h2><ul><li><code>svg</code></li><li><code>border-radius</code></li><li>纯<code>js</code>实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li></ul><h2 id="22-网页验证码是干嘛的，是为了解决什么安全问题"><a href="#22-网页验证码是干嘛的，是为了解决什么安全问题" class="headerlink" title="22 网页验证码是干嘛的，是为了解决什么安全问题"></a>22 网页验证码是干嘛的，是为了解决什么安全问题</h2><ul><li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li><li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li></ul><h2 id="23-viewport"><a href="#23-viewport" class="headerlink" title="23 viewport"></a>23 viewport</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> /&gt;</span></span><br><span class="line">    // width    设置viewport宽度，为一个正整数，或字符串‘device-width’</span><br><span class="line">    // device-width  设备宽度</span><br><span class="line">    // height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置</span><br><span class="line">    // initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数</span><br><span class="line">    // minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数</span><br><span class="line">    // maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数</span><br><span class="line">    // user-scalable    是否允许手动缩放</span><br></pre></td></tr></table></figure></div><ul><li>延伸提问<ul><li>怎样处理 移动端 1px 被 渲染成 2px问题</li></ul></li><li>局部处理<ul><li>meta标签中的 viewport属性 ，initial-scale 设置为 1</li><li>rem按照设计稿标准走，外加利用transfrome 的scale(0.5) 缩小一倍即可；</li></ul></li><li>全局处理<ul><li>mate标签中的 viewport属性 ，initial-scale 设置为 0.5</li><li>rem 按照设计稿标准走即可</li></ul></li></ul><h2 id="24-渲染优化"><a href="#24-渲染优化" class="headerlink" title="24 渲染优化"></a>24 渲染优化</h2><ul><li><p>禁止使用iframe（阻塞父文档onload事件）</p><ul><li>iframe会阻塞主页面的Onload事件</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript</li><li>动态给iframe添加src属性值，这样可以绕开以上两个问题</li></ul></li><li><p>禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）</p></li><li><p>使用CSS3代码代替JS动画（尽可能避免重绘重排以及回流）</p></li><li><p>对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU</p><ul><li>小图标优势在于<ul><li>减少HTTP请求</li><li>避免文件跨域</li><li>修改及时生效</li></ul></li></ul></li><li><p>页面头部的<style></style> <script></script> 会阻塞页面；（因为 Renderer进程中 JS线程和渲染线程是互斥的）</p></li><li><p>页面中空的 href 和 src 会阻塞页面其他资源的加载 (阻塞下载进程)</p></li><li><p>网页gzip，CDN托管，data缓存 ，图片服务器</p></li><li><p>前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p></li><li><p>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能</p></li><li><p>当需要设置的样式很多时设置className而不是直接操作style</p></li><li><p>少用全局变量、缓存DOM节点查找的结果。减少IO读取操作</p></li><li><p>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳</p></li><li><p>对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO</p></li></ul><h2 id="25-meta-viewport相关"><a href="#25-meta-viewport相关" class="headerlink" title="25 meta viewport相关"></a>25 meta viewport相关</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  <span class="comment">&lt;!--H5标准声明，使用 HTML5 doctype，不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">”en”</span>&gt;</span> <span class="comment">&lt;!--标准的 lang 属性写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">’utf-8′</span>&gt;</span>    <span class="comment">&lt;!--声明文档使用的字符编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”X-UA-Compatible”</span> <span class="attr">content</span>=<span class="string">”IE</span>=<span class="string">edge,chrome</span>=<span class="string">1″/</span>&gt;</span>   <span class="comment">&lt;!--优先使用 IE 最新版本和 Chrome--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”description”</span> <span class="attr">content</span>=<span class="string">”不超过150个字符”/</span>&gt;</span>       <span class="comment">&lt;!--页面描述--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”keywords”</span> <span class="attr">content</span>=<span class="string">””/</span>&gt;</span>     <span class="comment">&lt;!-- 页面关键词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”author”</span> <span class="attr">content</span>=<span class="string">”name,</span> <span class="attr">email</span>@<span class="attr">gmail.com</span>”/&gt;</span>    <span class="comment">&lt;!--网页作者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”robots”</span> <span class="attr">content</span>=<span class="string">”index,follow”/</span>&gt;</span>      <span class="comment">&lt;!--搜索引擎抓取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”initial-scale</span>=<span class="string">1,</span> <span class="attr">maximum-scale</span>=<span class="string">3,</span> <span class="attr">minimum-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span>&gt;</span> <span class="comment">&lt;!--为移动设备添加 viewport--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-title”</span> <span class="attr">content</span>=<span class="string">”标题”</span>&gt;</span> <span class="comment">&lt;!--iOS 设备 begin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-capable”</span> <span class="attr">content</span>=<span class="string">”yes”/</span>&gt;</span>  <span class="comment">&lt;!--添加到主屏后的标题（iOS 6 新增）</span></span><br><span class="line"><span class="comment">是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-itunes-app”</span> <span class="attr">content</span>=<span class="string">”app-id</span>=<span class="string">myAppStoreID,</span> <span class="attr">affiliate-data</span>=<span class="string">myAffiliateData,</span> <span class="attr">app-argument</span>=<span class="string">myURL”</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-status-bar-style”</span> <span class="attr">content</span>=<span class="string">”black”/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”format-detection”</span> <span class="attr">content</span>=<span class="string">”telphone</span>=<span class="string">no,</span> <span class="attr">email</span>=<span class="string">no”/</span>&gt;</span>  <span class="comment">&lt;!--设置苹果工具栏颜色--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”renderer”</span> <span class="attr">content</span>=<span class="string">”webkit”</span>&gt;</span> <span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”X-UA-Compatible”</span> <span class="attr">content</span>=<span class="string">”IE</span>=<span class="string">edge”</span>&gt;</span>     <span class="comment">&lt;!--避免IE使用兼容模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”Cache-Control”</span> <span class="attr">content</span>=<span class="string">”no-siteapp”</span> /&gt;</span>    <span class="comment">&lt;!--不让百度转码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”HandheldFriendly”</span> <span class="attr">content</span>=<span class="string">”true”</span>&gt;</span>     <span class="comment">&lt;!--针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”MobileOptimized”</span> <span class="attr">content</span>=<span class="string">”320″</span>&gt;</span>   <span class="comment">&lt;!--微软的老式浏览器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”screen-orientation”</span> <span class="attr">content</span>=<span class="string">”portrait”</span>&gt;</span>   <span class="comment">&lt;!--uc强制竖屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-orientation”</span> <span class="attr">content</span>=<span class="string">”portrait”</span>&gt;</span>    <span class="comment">&lt;!--QQ强制竖屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”full-screen”</span> <span class="attr">content</span>=<span class="string">”yes”</span>&gt;</span>              <span class="comment">&lt;!--UC强制全屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-fullscreen”</span> <span class="attr">content</span>=<span class="string">”true”</span>&gt;</span>       <span class="comment">&lt;!--QQ强制全屏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”browsermode”</span> <span class="attr">content</span>=<span class="string">”application”</span>&gt;</span>   <span class="comment">&lt;!--UC应用模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”x5-page-mode”</span> <span class="attr">content</span>=<span class="string">”app”</span>&gt;</span>   <span class="comment">&lt;!-- QQ应用模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”msapplication-tap-highlight”</span> <span class="attr">content</span>=<span class="string">”no”</span>&gt;</span>    <span class="comment">&lt;!--windows phone 点击无高亮</span></span><br><span class="line"><span class="comment">设置页面不缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”pragma”</span> <span class="attr">content</span>=<span class="string">”no-cache”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”cache-control”</span> <span class="attr">content</span>=<span class="string">”no-cache”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">”expires”</span> <span class="attr">content</span>=<span class="string">”0″</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="26-你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么"><a href="#26-你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么" class="headerlink" title="26 你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?"></a>26 你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?</h2><ul><li><code>IE</code>: <code>trident</code>内核</li><li><code>Firefox</code>：<code>gecko</code>内核</li><li><code>Safari</code>:<code>webkit</code>内核</li><li><code>Opera</code>:以前是<code>presto</code>内核，<code>Opera</code>现已改用<code>Google - Chrome</code>的<code>Blink</code>内核</li><li><code>Chrome</code>:<code>Blink</code>(基于<code>webki</code>t，<code>Google</code>与<code>Opera Software</code>共同开发)</li></ul><h2 id="27-div-css的布局较table布局有什么优点？"><a href="#27-div-css的布局较table布局有什么优点？" class="headerlink" title="27 div+css的布局较table布局有什么优点？"></a>27 div+css的布局较table布局有什么优点？</h2><ul><li>改版的时候更方便 只要改css文件。</li><li>页面加载速度更快、结构化清晰、页面显示简洁。</li><li>表现与结构相分离。</li><li>易于优化（seo）搜索引擎更友好，排名更容易靠前。</li></ul><h2 id="28-a：img的alt与title有何异同？b：strong与em的异同？"><a href="#28-a：img的alt与title有何异同？b：strong与em的异同？" class="headerlink" title="28 a：img的alt与title有何异同？b：strong与em的异同？"></a>28 a：img的alt与title有何异同？b：strong与em的异同？</h2><ul><li><p>alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)</p></li><li><p>title(tool tip):该属性为设置该属性的元素提供建议性的信息</p></li><li><p>strong:粗体强调标签，强调，表示内容的重要性</p></li><li><p>em:斜体强调标签，更强烈强调，表示内容的强调点</p></li></ul><h2 id="29-你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#29-你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="29 你能描述一下渐进增强和优雅降级之间的不同吗"></a>29 你能描述一下渐进增强和优雅降级之间的不同吗</h2><ul><li>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li><li>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。<blockquote><p>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p></blockquote></li></ul><h2 id="30-为什么利用多个域名来存储网站资源会更有效？"><a href="#30-为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="30 为什么利用多个域名来存储网站资源会更有效？"></a>30 为什么利用多个域名来存储网站资源会更有效？</h2><ul><li>CDN缓存更方便</li><li>突破浏览器并发限制</li><li>节约cookie带宽</li><li>节约主域名的连接数，优化页面响应速度</li><li>防止不必要的安全问题</li></ul><h2 id="31-简述一下src与href的区别"><a href="#31-简述一下src与href的区别" class="headerlink" title="31 简述一下src与href的区别"></a>31 简述一下src与href的区别</h2><ul><li><p>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</p></li><li><p>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素</p><blockquote><script src="js.js"></script> 当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部</blockquote></li><li><p>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加</p></li><li><p><code>&lt;link href=&quot;common.css&quot; rel=&quot;stylesheet&quot;/&gt;</code>那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式</p></li></ul><h2 id="32-知道的网页制作会用到的图片格式有哪些？"><a href="#32-知道的网页制作会用到的图片格式有哪些？" class="headerlink" title="32 知道的网页制作会用到的图片格式有哪些？"></a>32 知道的网页制作会用到的图片格式有哪些？</h2><ul><li>png-8、png-24、jpeg、gif、svg</li></ul><blockquote><p>但是上面的那些都不是面试官想要的最后答案。面试官希望听到是Webp,Apng。（是否有关注新技术，新鲜事物）</p></blockquote><ul><li>Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。</li><li>在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40%。</li><li>Apng：全称是“Animated Portable Network Graphics”, 是PNG的位图动画扩展，可以实现png格式的动态图片效果。04年诞生，但一直得不到各大浏览器厂商的支持，直到日前得到 iOS safari 8的支持，有望代替GIF成为下一代动态图标准</li></ul><h2 id="33-在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#33-在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="33 在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"></a>33 在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？</h2><blockquote><p>dns缓存，cdn缓存，浏览器缓存，服务器缓存</p></blockquote><h2 id="33-一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"><a href="#33-一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。" class="headerlink" title="33 一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"></a>33 一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。</h2><ul><li>图片懒加载，在页面上的未可视区域可以添加一个滚动事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。</li><li>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。</li><li>如果图片为css图片，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。</li><li>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。</li><li>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。</li></ul><h2 id="34-常见排序算法的时间复杂度-空间复杂度"><a href="#34-常见排序算法的时间复杂度-空间复杂度" class="headerlink" title="34 常见排序算法的时间复杂度,空间复杂度"></a>34 常见排序算法的时间复杂度,空间复杂度</h2><h2 id="35-web开发中会话跟踪的方法有哪些"><a href="#35-web开发中会话跟踪的方法有哪些" class="headerlink" title="35 web开发中会话跟踪的方法有哪些"></a>35 web开发中会话跟踪的方法有哪些</h2><ul><li>cookie</li><li>session</li><li>url重写</li><li>隐藏input</li><li>ip地址</li></ul><h2 id="36-HTTP-request报文结构是怎样的"><a href="#36-HTTP-request报文结构是怎样的" class="headerlink" title="36 HTTP request报文结构是怎样的"></a>36 HTTP request报文结构是怎样的</h2><ul><li>首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF</li><li>首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束</li><li>请求头和消息实体之间有一个CRLF分隔</li><li>根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;Protocols&#x2F;rfc2616&#x2F;rfc2616-sec5.html HTTP&#x2F;1.1</span><br><span class="line">Host: www.w3.org</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;35.0.1916.153 Safari&#x2F;537.36</span><br><span class="line">Referer: https:&#x2F;&#x2F;www.google.com.hk&#x2F;</span><br><span class="line">Accept-Encoding: gzip,deflate,sdch</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en;q&#x3D;0.6</span><br><span class="line">Cookie: authorstyle&#x3D;yes</span><br><span class="line">If-None-Match: &quot;2cc8-3e3073913b100&quot;</span><br><span class="line">If-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class="line"></span><br><span class="line">name&#x3D;qiu&amp;age&#x3D;25</span><br></pre></td></tr></table></figure></div><h2 id="37-HTTP-response报文结构是怎样的"><a href="#37-HTTP-response报文结构是怎样的" class="headerlink" title="37 HTTP response报文结构是怎样的"></a>37 HTTP response报文结构是怎样的</h2><ul><li>首行是状态行包括：HTTP版本，状态码，状态描述，后面跟一个CRLF</li><li>首行之后是若干行响应头，包括：通用头部，响应头部，实体头部</li><li>响应头部和响应实体之间用一个CRLF空行分隔</li><li>最后是一个可能的消息实体 响应报文例子如下：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Tue, 08 Jul 2014 05:28:43 GMT</span><br><span class="line">Server: Apache&#x2F;2</span><br><span class="line">Last-Modified: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class="line">ETag: &quot;40d7-3e3073913b100&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 16599</span><br><span class="line">Cache-Control: max-age&#x3D;21600</span><br><span class="line">Expires: Tue, 08 Jul 2014 11:28:43 GMT</span><br><span class="line">P3P: policyref&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;05&#x2F;P3P&#x2F;p3p.xml&quot;</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;iso-8859-1</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;: &quot;qiu&quot;, &quot;age&quot;: 25&#125;</span><br></pre></td></tr></table></figure></div><h2 id="38-title与h1的区别、b与strong的区别、i与em的区别"><a href="#38-title与h1的区别、b与strong的区别、i与em的区别" class="headerlink" title="38 title与h1的区别、b与strong的区别、i与em的区别"></a>38 title与h1的区别、b与strong的区别、i与em的区别</h2><ul><li>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响</li><li>strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：&lt;strong&gt;会重读，而&lt;B&gt;是展示强调内容</li><li>i内容展示为斜体，em表示强调的文本</li></ul><h2 id="39-请你谈谈Cookie的弊端"><a href="#39-请你谈谈Cookie的弊端" class="headerlink" title="39 请你谈谈Cookie的弊端"></a>39 请你谈谈Cookie的弊端</h2><blockquote><p>cookie虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的</p></blockquote><ul><li>每个特定的域名下最多生成20个cookie</li><li>IE6或更低版本最多20个cookie</li><li>IE7和之后的版本最后可以有50个cookie</li><li>Firefox最多50个cookie</li><li>chrome和Safari没有做硬性限制</li><li>IE 和 Opera 会清理近期最少使用的 cookie，Firefox 会随机清理 cookie</li><li>cookie 的最大大约为 4096 字节，为了兼容性，一般设置不超过 4095 字节</li><li>如果 cookie 被人拦截了，就可以取得所有的 session 信息<h3 id="git-fetch和git-pull的区别"><a href="#git-fetch和git-pull的区别" class="headerlink" title="git fetch和git pull的区别"></a>git fetch和git pull的区别</h3></li><li>git pull：相当于是从远程获取最新版本并merge到本地</li><li>git fetch：相当于是从远程获取最新版本到本地，不会自动merge</li></ul><h1 id="二、CSS部分"><a href="#二、CSS部分" class="headerlink" title="二、CSS部分"></a>二、CSS部分</h1><h2 id="1-css-sprite是什么-有什么优缺点"><a href="#1-css-sprite是什么-有什么优缺点" class="headerlink" title="1 css sprite是什么,有什么优缺点"></a>1 css sprite是什么,有什么优缺点</h2><ul><li>概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案。</li><li>优点：<ul><li>减少HTTP请求数，极大地提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li><li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li></ul></li><li>缺点：<ul><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li></ul></li></ul><h2 id="2-display-none-与visibility-hidden-的区别"><a href="#2-display-none-与visibility-hidden-的区别" class="headerlink" title="2 display: none;与visibility: hidden;的区别"></a>2 display: none;与visibility: hidden;的区别</h2><ul><li><p>联系：它们都能让元素不可见</p></li><li><p>区别：</p><ul><li>display:none;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visibility: hidden;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</li><li>display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility: hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式</li><li>修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘。</li><li>读屏器不会读取display: none;元素内容；会读取visibility: hidden;元素内容</li></ul></li></ul><h2 id="3-link与-import的区别"><a href="#3-link与-import的区别" class="headerlink" title="3 link与@import的区别"></a>3 link与@import的区别</h2><ol><li>link是HTML方式， @import是CSS方式</li><li>link最大限度支持并行下载，@import过多嵌套导致串行下载，出现FOUC(文档样- 式短暂失效)</li><li>link可以通过rel=”alternate stylesheet”指定候选样式</li><li>浏览器对link支持早于@import，可以使用@import对老浏览器隐藏样式</li><li>@import必须在样式规则之前，可以在css文件中引用其他文件</li><li>总体来说：link优于@import</li></ol><h2 id="4-什么是FOUC-如何避免"><a href="#4-什么是FOUC-如何避免" class="headerlink" title="4 什么是FOUC?如何避免"></a>4 什么是FOUC?如何避免</h2><ul><li>Flash Of Unstyled Content：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。</li><li>解决方法：把样式表放到文档的<head></head></li></ul><h2 id="5-如何创建块级格式化上下文-block-formatting-context-BFC有什么用"><a href="#5-如何创建块级格式化上下文-block-formatting-context-BFC有什么用" class="headerlink" title="5 如何创建块级格式化上下文(block formatting context),BFC有什么用"></a>5 如何创建块级格式化上下文(block formatting context),BFC有什么用</h2><blockquote><p>BFC(Block Formatting Context)，块级格式化上下文，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响</p></blockquote><p><strong>触发条件 (以下任意一条)</strong></p><ul><li>float的值不为none</li><li>overflow的值不为visible</li><li>display的值为table-cell、tabble-caption和inline-block之一</li><li>position的值不为static或则releative中的任何一个<blockquote><p>在IE下, Layout,可通过zoom:1 触发</p></blockquote></li></ul><p><strong>.BFC布局与普通文档流布局区别 普通文档流布局:</strong></p><ul><li>浮动的元素是不会被父级计算高度</li><li>非浮动元素会覆盖浮动元素的位置</li><li>margin会传递给父级元素</li><li>两个相邻元素上下的margin会重叠</li></ul><p><strong>BFC布局规则:</strong></p><ul><li>浮动的元素会被父级计算高度(父级元素触发了BFC)</li><li>非浮动元素不会覆盖浮动元素的位置(非浮动元素触发了BFC)</li><li>margin不会传递给父级(父级触发BFC)</li><li>属于同一个BFC的两个相邻元素上下margin会重叠</li></ul><p><strong>开发中的应用</strong></p><ul><li>阻止margin重叠</li><li>可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个 div都位于同一个 BFC 区域之中)</li><li>自适应两栏布局</li><li>可以阻止元素被浮动元素覆盖</li></ul><h2 id="6-display、float、position的关系"><a href="#6-display、float、position的关系" class="headerlink" title="6 display、float、position的关系"></a>6 display、float、position的关系</h2><ul><li>如果display取值为none，那么position和float都不起作用，这种情况下元素不产生框</li><li>否则，如果position取值为absolute或者fixed，框就是绝对定位的，float的计算值为none，display根据下面的表格进行调整。</li><li>否则，如果float不是none，框是浮动的，display根据下表进行调整</li><li>否则，如果元素是根元素，display根据下表进行调整</li><li>其他情况下display的值为指定值</li><li>总结起来：绝对定位、浮动、根元素都需要调整display</li></ul><h2 id="7-清除浮动的几种方式，各自的优缺点"><a href="#7-清除浮动的几种方式，各自的优缺点" class="headerlink" title="7 清除浮动的几种方式，各自的优缺点"></a>7 清除浮动的几种方式，各自的优缺点</h2><ul><li>父级div定义height</li><li>结尾处加空div标签clear:both</li><li>父级div定义伪类:after和zoom</li><li>父级div定义overflow:hidden</li><li>父级div也浮动，需要定义宽度</li><li>结尾处加br标签clear:both</li><li>比较好的是第3种方式，好多网站都这么用</li></ul><h2 id="8-为什么要初始化CSS样式"><a href="#8-为什么要初始化CSS样式" class="headerlink" title="8 为什么要初始化CSS样式?"></a>8 为什么要初始化CSS样式?</h2><ul><li>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</li><li>当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化</li></ul><h2 id="9-css3有哪些新特性"><a href="#9-css3有哪些新特性" class="headerlink" title="9 css3有哪些新特性"></a>9 css3有哪些新特性</h2><ul><li>新增选择器 p:nth-child(n){color: rgba(255, 0, 0, 0.75)}</li><li>弹性盒模型 display: flex;</li><li>多列布局 column-count: 5;</li><li>媒体查询 @media (max-width: 480px) {.box: {column-count: 1;}}</li><li>个性化字体 @font-face{font-family: BorderWeb; src:url(BORDERW0.eot);}</li><li>颜色透明度 color: rgba(255, 0, 0, 0.75);</li><li>圆角 border-radius: 5px;</li><li>渐变 background:linear-gradient(red, green, blue);</li><li>阴影 box-shadow:3px 3px 3px rgba(0, 64, 128, 0.3);</li><li>倒影 box-reflect: below 2px;</li><li>文字装饰 text-stroke-color: red;</li><li>文字溢出 text-overflow:ellipsis;</li><li>背景效果 background-size: 100px 100px;</li><li>边框效果 border-image:url(bt_blue.png) 0 10;</li><li>转换<ul><li>旋转 transform: rotate(20deg);</li><li>倾斜 transform: skew(150deg, -10deg);</li><li>位移 transform: translate(20px, 20px);</li><li>缩放 transform: scale(.5);</li></ul></li><li>平滑过渡 transition: all .3s ease-in .1s;</li><li>动画 @keyframes anim-1 {50% {border-radius: 50%;}} animation: anim-1 1s;</li></ul><p><strong>CSS3新增伪类有那些？</strong></p><ul><li>p:first-of-type 选择属于其父元素的首个&lt;p&gt;元素的每个&lt;p&gt; 元素。</li><li>p:last-of-type 选择属于其父元素的最后 &lt;p&gt; 元素的每个&lt;p&gt; 元素。</li><li>p:only-of-type 选择属于其父元素唯一的 &lt;p&gt;元素的每个 &lt;p&gt; 元素。</li><li>p:only-child 选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。</li><li>p:nth-child(2) 选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。</li><li>:after 在元素之前添加内容,也可以用来做清除浮动。</li><li>:before 在元素之后添加内容。</li><li>:enabled 已启用的表单元素。</li><li>:disabled 已禁用的表单元素。</li><li>:checked 单选框或复选框被选中。</li></ul><h2 id="10-display有哪些值？说明他们的作用"><a href="#10-display有哪些值？说明他们的作用" class="headerlink" title="10 display有哪些值？说明他们的作用"></a>10 display有哪些值？说明他们的作用</h2><ul><li>block 转换成块状元素。</li><li>inline 转换成行内元素。</li><li>none 设置元素不可见。</li><li>inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。</li><li>list-item 象块类型元素一样显示，并添加样式列表标记。</li><li>table 此元素会作为块级表格来显示</li><li>inherit 规定应该从父元素继承 display 属性的值</li></ul><h2 id="11-介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"><a href="#11-介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？" class="headerlink" title="11 介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"></a>11 介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h2><blockquote><ul><li>有两种， IE盒子模型、W3C盒子模型；</li><li>盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；</li><li>区 别： IE的content部分把 border 和 padding计算了进去;</li></ul></blockquote><ul><li>盒子模型构成：内容(content)、内填充(padding)、 边框(border)、外边距(margin)</li><li>IE8及其以下版本浏览器，未声明 DOCTYPE，内容宽高会包含内填充和边框，称为怪异盒模型(IE盒模型)</li><li>标准(W3C)盒模型：元素宽度 = width + padding + border + margin</li><li>怪异(IE)盒模型：元素宽度 = width + margin</li><li>标准浏览器通过设置 css3 的 box-sizing: border-box 属性，触发“怪异模式”解析计算宽高</li></ul><p><strong>box-sizing 常用的属性有哪些？分别有什么作用</strong></p><ul><li>box-sizing: content-box; 默认的标准(W3C)盒模型元素效果</li><li>box-sizing: border-box; 触发怪异(IE)盒模型元素的效果</li><li>box-sizing: inherit; 继承父元素 box-sizing 属性的值</li></ul><h2 id="12-CSS优先级算法如何计算？"><a href="#12-CSS优先级算法如何计算？" class="headerlink" title="12 CSS优先级算法如何计算？"></a>12 CSS优先级算法如何计算？</h2><ul><li>优先级就近原则，同权重情况下样式定义最近者为准</li><li>载入样式以最后载入的定位为准</li><li>优先级为: !important &gt; id &gt; class &gt; tag; !important 比 内联优先级高</li></ul><h2 id="13-对BFC规范的理解？"><a href="#13-对BFC规范的理解？" class="headerlink" title="13 对BFC规范的理解？"></a>13 对BFC规范的理解？</h2><ul><li>一个页面是由很多个 Box 组成的,元素的类型和 display` 属性,决定了这个 Box 的类型</li><li>不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响</li></ul><h2 id="14-谈谈浮动和清除浮动"><a href="#14-谈谈浮动和清除浮动" class="headerlink" title="14 谈谈浮动和清除浮动"></a>14 谈谈浮动和清除浮动</h2><ul><li>浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上</li></ul><h2 id="15-position的值，-relative和absolute定位原点是"><a href="#15-position的值，-relative和absolute定位原点是" class="headerlink" title="15 position的值， relative和absolute定位原点是"></a>15 position的值， relative和absolute定位原点是</h2><ul><li>absolute：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位</li><li>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位</li><li>relative：生成相对定位的元素，相对于其正常位置进行定位</li><li>static 默认值。没有定位，元素出现在正常的流中</li><li>inherit 规定从父元素继承 position 属性的值</li></ul><h2 id="16-display-inline-block-什么时候不会显示间隙？-携程"><a href="#16-display-inline-block-什么时候不会显示间隙？-携程" class="headerlink" title="16 display:inline-block 什么时候不会显示间隙？(携程)"></a>16 display:inline-block 什么时候不会显示间隙？(携程)</h2><ul><li>移除空格</li><li>使用margin负值</li><li>使用font-size:0</li><li>letter-spacing</li><li>word-spacing</li></ul><h2 id="17-PNG-GIF-JPG的区别及如何选"><a href="#17-PNG-GIF-JPG的区别及如何选" class="headerlink" title="17 PNG\GIF\JPG的区别及如何选"></a>17 PNG\GIF\JPG的区别及如何选</h2><ul><li><p>GIF</p><ul><li>8位像素，256色</li><li>无损压缩</li><li>支持简单动画</li><li>支持boolean透明</li><li>适合简单动画</li></ul></li><li><p>JPEG</p><ul><li>颜色限于256</li><li>有损压缩</li><li>可控制压缩质量</li><li>不支持透明</li><li>适合照片</li></ul></li><li><p>PNG</p><ul><li>有PNG8和truecolor PNG</li><li>PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画</li><li>适合图标、背景、按钮</li></ul></li></ul><h2 id="18-行内元素float-left后是否变为块级元素？"><a href="#18-行内元素float-left后是否变为块级元素？" class="headerlink" title="18 行内元素float:left后是否变为块级元素？"></a>18 行内元素float:left后是否变为块级元素？</h2><blockquote><p>行内元素设置成浮动之后变得更加像是inline-block（行内块级元素，设置成这个属性的元素会同时拥有行内和块级的特性，最明显的不同是它的默认宽度不是100%），这时候给行内元素设置padding-top和padding-bottom或者width、height都是有效果的</p></blockquote><h2 id="19-在网页中的应该使用奇数还是偶数的字体？为什么呢？"><a href="#19-在网页中的应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="19 在网页中的应该使用奇数还是偶数的字体？为什么呢？"></a>19 在网页中的应该使用奇数还是偶数的字体？为什么呢？</h2><ul><li>偶数字号相对更容易和 web 设计的其他部分构成比例关系</li></ul><h2 id="20-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用"><a href="#20-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用" class="headerlink" title="20 ::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用"></a>20 ::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用</h2><ul><li>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素</li><li>用于区分伪类和伪元素</li></ul><h2 id="21-如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"><a href="#21-如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）" class="headerlink" title="21 如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"></a>21 如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</h2><ul><li>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60*1000ms ＝ 16.7ms</li></ul><h2 id="22-CSS合并方法"><a href="#22-CSS合并方法" class="headerlink" title="22 CSS合并方法"></a>22 CSS合并方法</h2><ul><li>避免使用@import引入多个css文件，可以使用CSS工具将CSS合并为一个CSS文件，例如使用Sass\Compass等</li></ul><h2 id="23-CSS不同选择器的权重-CSS层叠的规则"><a href="#23-CSS不同选择器的权重-CSS层叠的规则" class="headerlink" title="23 CSS不同选择器的权重(CSS层叠的规则)"></a>23 CSS不同选择器的权重(CSS层叠的规则)</h2><ul><li>！important规则最重要，大于其它规则</li><li>行内样式规则，加1000</li><li>对于选择器中给定的各个ID属性值，加100</li><li>对于选择器中给定的各个类属性、属性选择器或者伪类选择器，加10</li><li>对于选择其中给定的各个元素标签选择器，加1</li><li>如果权值一样，则按照样式规则的先后顺序来应用，顺序靠后的覆盖靠前的规则<blockquote><p>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下/// 例子是演示各种定义的权重值：</p></blockquote></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*权重为1*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*权重为10*/</span></span><br><span class="line"><span class="selector-class">.class1</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*权重为100*/</span></span><br><span class="line"><span class="selector-id">#id1</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*权重为100+1=101*/</span></span><br><span class="line"><span class="selector-id">#id1</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*权重为10+1=11*/</span></span><br><span class="line"><span class="selector-class">.class1</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*权重为10+10+1=21*/</span></span><br><span class="line"><span class="selector-class">.class1</span> <span class="selector-class">.class2</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现</p></blockquote><h2 id="24-列出你所知道可以改变页面布局的属性"><a href="#24-列出你所知道可以改变页面布局的属性" class="headerlink" title="24 列出你所知道可以改变页面布局的属性"></a>24 列出你所知道可以改变页面布局的属性</h2><ul><li>position、display、float、width、height、margin、padding、top、left、right、`</li></ul><h2 id="25-CSS在性能优化方面的实践"><a href="#25-CSS在性能优化方面的实践" class="headerlink" title="25 CSS在性能优化方面的实践"></a>25 CSS在性能优化方面的实践</h2><ul><li>css压缩与合并、Gzip压缩</li><li>css文件放在head里、不要用@import</li><li>尽量用缩写、避免用滤镜、合理使用选择器</li></ul><h2 id="26-CSS3动画（简单动画的实现，如旋转等）"><a href="#26-CSS3动画（简单动画的实现，如旋转等）" class="headerlink" title="26 CSS3动画（简单动画的实现，如旋转等）"></a>26 CSS3动画（简单动画的实现，如旋转等）</h2><ul><li>依靠CSS3中提出的三个属性：transition、transform、animation</li><li>transition：定义了元素在变化过程中是怎么样的，包含transition-property、transition-duration、transition-timing-function、transition-delay。</li><li>transform：定义元素的变化结果，包含rotate、scale、skew、translate。</li><li>animation：动画定义了动作的每一帧（@keyframes）有什么效果，包括animation-name，animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction</li></ul><h2 id="27-base64的原理及优缺点"><a href="#27-base64的原理及优缺点" class="headerlink" title="27 base64的原理及优缺点"></a>27 base64的原理及优缺点</h2><ul><li>优点可以加密，减少了HTTTP请求</li><li>缺点是需要消耗CPU进行编解码</li></ul><h2 id="28-几种常见的CSS布局"><a href="#28-几种常见的CSS布局" class="headerlink" title="28 几种常见的CSS布局"></a>28 几种常见的CSS布局</h2><h3 id="流体布局"><a href="#流体布局" class="headerlink" title="流体布局"></a>流体布局</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">220px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><ul><li>要求：三列布局；中间主体内容前置，且宽度自适应；两边内容定宽<ul><li>好处：重要的内容放在文档流前面可以优先渲染</li><li>原理：利用相对定位、浮动、负边距布局，而不添加额外标签</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">150px</span>;</span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">190px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.left</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">left</span>: -<span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">right</span>: -<span class="number">190px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><ul><li>双飞翼布局：对圣杯布局（使用相对定位，对以后布局有局限性）的改进，消除相对定位布局</li><li>原理：主体元素上设置左右边距，预留两翼位置。左右两栏使用浮动和负边距归位，消除相对定位。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/*padding-left:150px;*/</span></span><br><span class="line">    <span class="comment">/*padding-right:190px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">190px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/*position: relative;*/</span></span><br><span class="line">    <span class="comment">/*left:-150px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">    <span class="comment">/*position:relative;*/</span></span><br><span class="line">    <span class="comment">/*right:-190px;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="29-stylus-sass-less区别"><a href="#29-stylus-sass-less区别" class="headerlink" title="29 stylus/sass/less区别"></a>29 stylus/sass/less区别</h2><ul><li>均具有“变量”、“混合”、“嵌套”、“继承”、“颜色混合”五大基本特性</li><li>Scss和LESS语法较为严谨，LESS要求一定要使用大括号“{}”，Scss和Stylus可以通过缩进表示层次与嵌套关系</li><li>Scss无全局变量的概念，LESS和Stylus有类似于其它语言的作用域概念</li><li>Sass是基于Ruby语言的，而LESS和Stylus可以基于NodeJS NPM下载相应库后进行编译；</li></ul><h2 id="30-postcss的作用"><a href="#30-postcss的作用" class="headerlink" title="30 postcss的作用"></a>30 postcss的作用</h2><ul><li>可以直观的理解为：它就是一个平台。为什么说它是一个平台呢？因为我们直接用它，感觉不能干什么事情，但是如果让一些插件在它上面跑，那么将会很强大</li><li>PostCSS 提供了一个解析器，它能够将 CSS 解析成抽象语法树</li><li>通过在 PostCSS 这个平台上，我们能够开发一些插件，来处理我们的CSS，比如热门的：autoprefixer</li><li>postcss可以对sass处理过后的css再处理 最常见的就是autoprefixer</li></ul><h2 id="31-css样式（选择器）的优先级"><a href="#31-css样式（选择器）的优先级" class="headerlink" title="31 css样式（选择器）的优先级"></a>31 css样式（选择器）的优先级</h2><ul><li>计算权重确定</li><li>!important</li><li>内联样式</li><li>后写的优先级高</li></ul><h2 id="32-自定义字体的使用场景"><a href="#32-自定义字体的使用场景" class="headerlink" title="32 自定义字体的使用场景"></a>32 自定义字体的使用场景</h2><ul><li>宣传/品牌/banner等固定文案</li><li>字体图标</li></ul><h2 id="33-如何美化CheckBox"><a href="#33-如何美化CheckBox" class="headerlink" title="33 如何美化CheckBox"></a>33 如何美化CheckBox</h2><ul><li>&lt;label&gt; 属性 for 和 id</li><li>隐藏原生的 &lt;input&gt;</li><li>:checked + &lt;label&gt;</li></ul><h2 id="34-伪类和伪元素的区别"><a href="#34-伪类和伪元素的区别" class="headerlink" title="34 伪类和伪元素的区别"></a>34 伪类和伪元素的区别</h2><ul><li>伪类表状态</li><li>伪元素是真的有元素</li><li>前者单冒号，后者双冒号</li></ul><h2 id="35-base64的使用"><a href="#35-base64的使用" class="headerlink" title="35 base64的使用"></a>35 base64的使用</h2><ul><li>用于减少 HTTP 请求</li><li>适用于小图片</li><li>base64的体积约为原图的4/3</li></ul><h2 id="36-自适应布局"><a href="#36-自适应布局" class="headerlink" title="36 自适应布局"></a>36 自适应布局</h2><p>思路：</p><ul><li>左侧浮动或者绝对定位，然后右侧margin撑开</li><li>使用<div>包含，然后靠负margin形成bfc</div></li><li>使用flex</li></ul><h2 id="37-请用CSS写一个简单的幻灯片效果页面"><a href="#37-请用CSS写一个简单的幻灯片效果页面" class="headerlink" title="37 请用CSS写一个简单的幻灯片效果页面"></a>37 请用CSS写一个简单的幻灯片效果页面</h2><blockquote><p>知道是要用CSS3。使用animation动画实现一个简单的幻灯片效果</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**css**/</span></span><br><span class="line"><span class="selector-class">.ani</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">480px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">50px</span> auto;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-animation-name</span>: <span class="string">"loops"</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-duration</span>: <span class="number">20s</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> <span class="string">"loops"</span> &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="built_in">url</span>(http://d.hiphotos.baidu.com/image/w%<span class="number">3</span>D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg) no-repeat;             </span><br><span class="line">    &#125;</span><br><span class="line">    25% &#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="built_in">url</span>(http://b.hiphotos.baidu.com/image/w%<span class="number">3</span>D400/sign=edee1572e9f81a4c2632edc9e72b6029/<span class="number">30</span>adcbef76094b364d72bceba1cc7cd98c109dd0.jpg) no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="built_in">url</span>(http://b.hiphotos.baidu.com/image/w%<span class="number">3</span>D400/sign=<span class="number">937</span>dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg) no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    75% &#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="built_in">url</span>(http://g.hiphotos.baidu.com/image/w%<span class="number">3</span>D400/sign=<span class="number">7</span>d37500b8544ebf86d71653fe9f9d736/<span class="number">0</span>df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg) no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background</span>:<span class="built_in">url</span>(http://c.hiphotos.baidu.com/image/w%<span class="number">3</span>D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/<span class="number">3</span>b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg) no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="38-什么是外边距重叠？重叠的结果是什么？"><a href="#38-什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="38 什么是外边距重叠？重叠的结果是什么？"></a>38 什么是外边距重叠？重叠的结果是什么？</h2><blockquote><p>外边距重叠就是margin-collapse</p></blockquote><ul><li>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。</li></ul><p><strong>折叠结果遵循下列计算规则：</strong></p><ul><li>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</li><li>两个外边距一正一负时，折叠结果是两者的相加的和。</li></ul><h2 id="39-rgba-和opacity的透明效果有什么不同？"><a href="#39-rgba-和opacity的透明效果有什么不同？" class="headerlink" title="39 rgba()和opacity的透明效果有什么不同？"></a>39 rgba()和opacity的透明效果有什么不同？</h2><ul><li>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，</li><li>而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）</li></ul><h2 id="40-css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"><a href="#40-css中可以让文字在垂直和水平方向上重叠的两个属性是什么？" class="headerlink" title="40 css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"></a>40 css中可以让文字在垂直和水平方向上重叠的两个属性是什么？</h2><ul><li>垂直方向：line-height</li><li>水平方向：letter-spacing</li></ul><h2 id="41-如何垂直居中一个浮动元素？"><a href="#41-如何垂直居中一个浮动元素？" class="headerlink" title="41 如何垂直居中一个浮动元素？"></a>41 如何垂直居中一个浮动元素？</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**方法一：已知元素的高宽**/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#6699FF</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;        <span class="comment">/*父元素需要相对定位*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>:-<span class="number">100px</span> ;   <span class="comment">/*二分之一的height，width*/</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**方法二:**/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6699FF</span>;</span><br><span class="line">  <span class="attribute">margin</span>:auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;        <span class="comment">/*父元素需要相对定位*/</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>如何垂直居中一个&lt;img&gt;?（用更简便的方法。）</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>     <span class="comment">/**&lt;img&gt;的容器设置如下**/</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="42-px和em的区别"><a href="#42-px和em的区别" class="headerlink" title="42 px和em的区别"></a>42 px和em的区别</h2><ul><li>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。</li><li>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。<blockquote><ul><li>px 相对于显示器屏幕分辨率，无法用浏览器字体放大功能</li><li>em 值并不是固定的，会继承父级的字体大小： em = 像素值 / 父级font-size</li></ul></blockquote></li></ul><h2 id="43-Sass、LESS是什么？大家为什么要使用他们？"><a href="#43-Sass、LESS是什么？大家为什么要使用他们？" class="headerlink" title="43 Sass、LESS是什么？大家为什么要使用他们？"></a>43 Sass、LESS是什么？大家为什么要使用他们？</h2><ul><li>他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法/语言编译成CSS。</li><li>例如Less是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)</li></ul><p><strong>为什么要使用它们？</strong></p><ul><li>结构清晰，便于扩展。</li><li>可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对- 浏览器语法差异的重复处理，减少无意义的机械劳动。</li><li>可以轻松实现多重继承。</li><li>完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只- 是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译</li></ul><h2 id="44-知道css有个content属性吗？有什么作用？有什么应用？"><a href="#44-知道css有个content属性吗？有什么作用？有什么应用？" class="headerlink" title="44 知道css有个content属性吗？有什么作用？有什么应用？"></a>44 知道css有个content属性吗？有什么作用？有什么应用？</h2><blockquote><p>css的content属性专门应用在 before/after伪元素上，用于来插入生成内容。最常见的应用是利用伪类清除浮动。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**一种常见利用伪类清除浮动的代码**/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"."</span>;       <span class="comment">/*这里利用到了content属性*/</span></span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">    <span class="attribute">clear</span>:both; </span><br><span class="line"> &#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="45-水平居中的方法"><a href="#45-水平居中的方法" class="headerlink" title="45 水平居中的方法"></a>45 水平居中的方法</h2><ul><li>元素为行内元素，设置父元素text-align:center</li><li>如果元素宽度固定，可以设置左右margin为auto;</li><li>绝对定位和移动: absolute + transform</li><li>使用flex-box布局，指定justify-content属性为center</li><li>display设置为tabel-ceil</li></ul><h2 id="46-垂直居中的方法"><a href="#46-垂直居中的方法" class="headerlink" title="46 垂直居中的方法"></a>46 垂直居中的方法</h2><ul><li>将显示方式设置为表格，display:table-cell,同时设置vertial-align：middle</li><li>使用flex布局，设置为align-item：center</li><li>绝对定位中设置bottom:0,top:0,并设置margin:auto</li><li>绝对定位中固定高度时设置top:50%，margin-top值为高度一半的负值</li><li>文本垂直居中设置line-height为height值</li><li>如果是单行文本, line-height 设置成和 height 值</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.vertical</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><ul><li>已知高度的块级子元素，采用绝对定位和负边距</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.vertical</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;  <span class="comment">/*子元素高度*/</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;  <span class="comment">/*父元素高度50%*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">150px</span>; <span class="comment">/*自身高度一半*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>未知高度的块级父子元素居中，模拟表格布局</li><li>缺点：IE67不兼容，父级 overflow：hidden 失效</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><ul><li>新增 inline-block 兄弟元素，设置 vertical-align<ul><li>缺点：需要增加额外标签，IE67不兼容</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;<span class="comment">/*定义父级高度，作为参考*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.extra</span> <span class="selector-class">.vertical</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;  <span class="comment">/*行内块显示*/</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: middle; <span class="comment">/*垂直居中*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.extra</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/*设置新增元素高度为100%*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>绝对定位配合 CSS3 位移</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.vertical</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;  <span class="comment">/*父元素高度50%*/</span></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>CSS3弹性盒模型</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/*子元素水平居中*/</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/*子元素垂直居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="47-如何使用CSS实现硬件加速？"><a href="#47-如何使用CSS实现硬件加速？" class="headerlink" title="47 如何使用CSS实现硬件加速？"></a>47 如何使用CSS实现硬件加速？</h2><blockquote><p>硬件加速是指通过创建独立的复合图层，让GPU来渲染这个图层，从而提高性能，</p></blockquote><ul><li>一般触发硬件加速的CSS属性有transform、opacity、filter，为了避免2D动画在 开始和结束的时候的repaint操作，一般使用tranform:translateZ(0)</li></ul><h2 id="48-重绘和回流（重排）是什么，如何避免？"><a href="#48-重绘和回流（重排）是什么，如何避免？" class="headerlink" title="48 重绘和回流（重排）是什么，如何避免？"></a>48 重绘和回流（重排）是什么，如何避免？</h2><ul><li>重绘：当渲染树中的元素外观（如：颜色）发生改变，不影响布局时，产生重绘</li><li>回流：当渲染树中的元素的布局（如：尺寸、位置、隐藏/状态状态）发生改变时，产生重绘回流</li><li>注意：JS获取Layout属性值（如：offsetLeft、scrollTop、getComputedStyle等）也会引起回流。因为浏览器需要通过回流计算最新值</li><li>回流必将引起重绘，而重绘不一定会引起回流</li></ul><p><strong>如何最小化重绘(repaint)和回流(reflow)：</strong></p><ul><li>需要要对元素进行复杂的操作时，可以先隐藏(display:”none”)，操作完成后再显示</li><li>需要创建多个DOM节点时，使用DocumentFragment创建完后一次性的加入document</li><li>缓存Layout属性值，如：var left = elem.offsetLeft; 这样，多次使用 left 只产生一次回流</li><li>尽量避免用table布局（table元素一旦触发回流就会导致table里所有的其它元素回流）</li><li>避免使用css表达式(expression)，因为每次调用都会重新计算值（包括加载页面）</li><li>尽量使用 css 属性简写，如：用 border 代替 border-width, border-style, border-color</li><li>批量修改元素样式：elem.className 和 elem.style.cssText 代替 elem.style.xxx</li></ul><h2 id="49-说一说css3的animation"><a href="#49-说一说css3的animation" class="headerlink" title="49 说一说css3的animation"></a>49 说一说css3的animation</h2><ul><li>css3的animation是css3新增的动画属性，这个css3动画的每一帧是通过@keyframes来声明的，keyframes声明了动画的名称，通过from、to或者是百分比来定义</li><li>每一帧动画元素的状态，通过animation-name来引用这个动画，同时css3动画也可以定义动画运行的时长、动画开始时间、动画播放方向、动画循环次数、动画播放的方式，</li><li>这些相关的动画子属性有：animation-name定义动画名、animation-duration定义动画播放的时长、animation-delay定义动画延迟播放的时间、animation-direction定义 动画的播放方向、animation-iteration-count定义播放次数、animation-fill-mode定义动画播放之后的状态、animation-play-state定义播放状态，如暂停运行等、animation-timing-function</li><li>定义播放的方式，如恒速播放、艰涩播放等。</li></ul><h2 id="50-左边宽度固定，右边自适应"><a href="#50-左边宽度固定，右边自适应" class="headerlink" title="50 左边宽度固定，右边自适应"></a>50 左边宽度固定，右边自适应</h2><blockquote><p>左侧固定宽度，右侧自适应宽度的两列布局实现</p></blockquote><p>html结构</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>自适应宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>在外层div（类名为outer）的div中，有两个子div，类名分别为left和right，其中left为固定宽度，而right为自适应宽度</p></blockquote><p><strong>方法1：左侧div设置成浮动：float: left，右侧div宽度会自拉升适应</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>方法2：对右侧:div进行绝对定位，然后再设置right=0，即可以实现宽度自适应</strong></p><blockquote><p>绝对定位元素的第一个高级特性就是其具有自动伸缩的功能，当我们将 width设置为 auto 的时候（或者不设置，默认为 auto ），绝对定位元素会根据其 left 和 right 自动伸缩其大小</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;          </span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>方法3：将左侧div进行绝对定位，然后右侧div设置margin-left: 200px</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>方法4：使用flex布局</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="51-两种以上方式实现已知或者未知宽度的垂直水平居中"><a href="#51-两种以上方式实现已知或者未知宽度的垂直水平居中" class="headerlink" title="51 两种以上方式实现已知或者未知宽度的垂直水平居中"></a>51 两种以上方式实现已知或者未知宽度的垂直水平居中</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 1 **/</span></span><br><span class="line"><span class="selector-class">.wraper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  .box &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 50%;</span><br><span class="line">    <span class="selector-tag">left</span>: 50%;</span><br><span class="line">    <span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">margin</span>: <span class="selector-tag">-50px</span> 0 0 <span class="selector-tag">-50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 2 **/</span></span><br><span class="line"><span class="selector-class">.wraper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  .box &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span>: 50%;</span><br><span class="line">    <span class="selector-tag">left</span>: 50%;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">-50</span>%, <span class="selector-tag">-50</span>%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 3 **/</span></span><br><span class="line"><span class="selector-class">.wraper</span> &#123;</span><br><span class="line">  .box &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">    <span class="selector-tag">justify-content</span><span class="selector-pseudo">:center</span>;</span><br><span class="line">    <span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 4 **/</span></span><br><span class="line"><span class="selector-class">.wraper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  .box &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">table-cell</span>;</span><br><span class="line">    <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="52-如何实现小于12px的字体效果"><a href="#52-如何实现小于12px的字体效果" class="headerlink" title="52 如何实现小于12px的字体效果"></a>52 如何实现小于12px的字体效果</h2><blockquote><p>transform:scale()这个属性只可以缩放可以定义宽高的元素，而行内元素是没有宽高的，我们可以加上一个display:inline-block;</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.7</span>);</span><br></pre></td></tr></table></figure></div><p>css的属性，可以缩放大小</p><h2 id="53-css-hack原理及常用hack"><a href="#53-css-hack原理及常用hack" class="headerlink" title="53 css hack原理及常用hack"></a>53 css hack原理及常用hack</h2><ul><li>原理：利用不同浏览器对CSS的支持和解析结果不一样编写针对特定浏览器样式。</li><li>常见的hack有<ul><li>属性hack</li><li>选择器hack</li><li>IE条件注释</li></ul></li></ul><h2 id="54-CSS有哪些继承属性"><a href="#54-CSS有哪些继承属性" class="headerlink" title="54 CSS有哪些继承属性"></a>54 CSS有哪些继承属性</h2><ul><li>关于文字排版的属性如：<ul><li>font<ul><li>word-break</li><li>letter-spacing</li><li>text-align</li><li>text-rendering</li><li>word-spacing</li><li>white-space</li><li>text-indent</li><li>text-transform</li><li>text-shadow</li><li>line-height</li><li>color</li><li>visibility</li><li>cursor</li></ul></li></ul></li></ul><h2 id="55-外边距折叠-collapsing-margins"><a href="#55-外边距折叠-collapsing-margins" class="headerlink" title="55 外边距折叠(collapsing margins)"></a>55 外边距折叠(collapsing margins)</h2><ul><li>毗邻的两个或多个 margin 会合并成一个margin，叫做外边距折叠。规则如下：<ul><li>两个或多个毗邻的普通流中的块元素垂直方向上的margin会折叠</li><li>浮动元素或inline-block元素或绝对定位元素的margin不会和垂直方向上的其他元素的margin折叠</li><li>创建了块级格式化上下文的元素，不会和它的子元素发生margin折叠</li><li>元素自身的margin-bottom和margin-top相邻时也会折</li></ul></li></ul><h2 id="56-CSS选择符有哪些？哪些属性可以继承"><a href="#56-CSS选择符有哪些？哪些属性可以继承" class="headerlink" title="56 CSS选择符有哪些？哪些属性可以继承"></a>56 CSS选择符有哪些？哪些属性可以继承</h2><ul><li>id选择器（ # myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div, h1, p）</li><li>相邻选择器（h1 + p）</li><li>子选择器（ul &gt; li）</li><li>后代选择器（li a）</li><li>通配符选择器（ * ）</li><li>属性选择器（a[rel = “external”]）</li><li>伪类选择器（a:hover, li:nth-child）</li></ul><p><strong>CSS哪些属性可以继承？哪些属性不可以继承</strong></p><ul><li>可继承的样式： font-size font-family color, UL LI DL DD DT</li><li>不可继承的样式：border padding margin width height</li></ul><h2 id="57-CSS3新增伪类有那些"><a href="#57-CSS3新增伪类有那些" class="headerlink" title="57 CSS3新增伪类有那些"></a>57 CSS3新增伪类有那些</h2><ul><li>:root 选择文档的根元素，等同于 html 元素</li><li>:empty 选择没有子元素的元素</li><li>:target 选取当前活动的目标元素</li><li>:not(selector) 选择除 selector 元素意外的元素</li><li>:enabled 选择可用的表单元素</li><li>:disabled 选择禁用的表单元素</li><li>:checked 选择被选中的表单元素</li><li>:after 在元素内部最前添加内容</li><li>:before 在元素内部最后添加内容</li><li>:nth-child(n) 匹配父元素下指定子元素，在所有子元素中排序第n</li><li>:nth-last-child(n) 匹配父元素下指定子元素，在所有子元素中排序第n，从后向前数</li><li>:nth-child(odd)</li><li>:nth-child(even)</li><li>:nth-child(3n+1)</li><li>:first-child</li><li>:last-child</li><li>:only-child</li><li>:nth-of-type(n) 匹配父元素下指定子元素，在同类子元素中排序第n</li><li>:nth-last-of-type(n) 匹配父元素下指定子元素，在同类子元素中排序第n，从后向前数</li><li>:nth-of-type(odd)</li><li>:nth-of-type(even)</li><li>:nth-of-type(3n+1)</li><li>:first-of-type</li><li>:last-of-type</li><li>:only-of-type</li><li>::selection 选择被用户选取的元素部分</li><li>:first-line 选择元素中的第一行</li><li>:first-letter 选择元素中的第一个字符</li></ul><h2 id="58-如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中"><a href="#58-如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中" class="headerlink" title="58 如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中"></a>58 如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中</h2><ul><li>给div设置一个宽度，然后添加margin:0 auto属性</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><ul><li>居中一个浮动元素</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 确定容器的宽高 宽500 高 300 的层</span></span><br><span class="line"><span class="comment">设置层的外边距 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span> ; <span class="attribute">height</span>:<span class="number">300px</span>;<span class="comment">/*高度可以不设*/</span></span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">position</span>:relative;         <span class="comment">/*相对定位*/</span></span><br><span class="line">  <span class="attribute">background-color</span>:pink;     <span class="comment">/*方便看效果*/</span></span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>让绝对定位的div居中</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">background</span>: none;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="59-用纯CSS创建一个三角形的原理是什么"><a href="#59-用纯CSS创建一个三角形的原理是什么" class="headerlink" title="59 用纯CSS创建一个三角形的原理是什么"></a>59 用纯CSS创建一个三角形的原理是什么</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把上、左、右三条边隐藏掉（颜色设为 transparent） */</span></span><br><span class="line"><span class="selector-id">#demo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="60-一个满屏-品-字布局-如何设计"><a href="#60-一个满屏-品-字布局-如何设计" class="headerlink" title="60 一个满屏 品 字布局 如何设计?"></a>60 一个满屏 品 字布局 如何设计?</h2><ul><li>简单的方式：<ul><li>上面的div宽100%，</li><li>下面的两个div分别宽50%，</li><li>然后用float或者inline使其不换行即可</li></ul></li></ul><h2 id="61-li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法"><a href="#61-li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法" class="headerlink" title="61 li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法"></a>61 li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法</h2><blockquote><p>行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了</p></blockquote><h2 id="62-为什么要初始化CSS样式"><a href="#62-为什么要初始化CSS样式" class="headerlink" title="62 为什么要初始化CSS样式"></a>62 为什么要初始化CSS样式</h2><blockquote><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异</p></blockquote><h2 id="63-请列举几种隐藏元素的方法"><a href="#63-请列举几种隐藏元素的方法" class="headerlink" title="63 请列举几种隐藏元素的方法"></a>63 请列举几种隐藏元素的方法</h2><ul><li>visibility: hidden; 这个属性只是简单的隐藏某个元素，但是元素占用的空间任然存在</li><li>opacity: 0; CSS3属性，设置0可以使一个元素完全透明</li><li>position: absolute; 设置一个很大的 left 负值定位，使元素定位在可见区域之外</li><li>display: none; 元素会变得不可见，并且不会再占用文档的空间。</li><li>transform: scale(0); 将一个元素设置为缩放无限小，元素将不可见，元素原来所在的位置将被保留</li><li>div hidden=”hidden”&gt; HTML5属性,效果和display:none;相同，但这个属性用于记录一个元素的状态</li><li>height: 0; 将元素高度设为 0 ，并消除边框</li><li>filter: blur(0); CSS3属性，将一个元素的模糊度设置为0，从而使这个元素“消失”在页面中</li></ul><h2 id="64-rgba-和-opacity-的透明效果有什么不同"><a href="#64-rgba-和-opacity-的透明效果有什么不同" class="headerlink" title="64 rgba() 和 opacity 的透明效果有什么不同"></a>64 rgba() 和 opacity 的透明效果有什么不同</h2><ul><li>opacity 作用于元素以及元素内的所有内容（包括文字）的透明度</li><li>rgba() 只作用于元素自身的颜色或其背景色，子元素不会继承透明效果</li></ul><h2 id="65-css-属性-content-有什么作用"><a href="#65-css-属性-content-有什么作用" class="headerlink" title="65 css 属性 content 有什么作用"></a>65 css 属性 content 有什么作用</h2><ul><li>content 属性专门应用在 before/after 伪元素上，用于插入额外内容或样式</li></ul><h2 id="66-请解释一下-CSS3-的-Flexbox（弹性盒布局模型）以及适用场景"><a href="#66-请解释一下-CSS3-的-Flexbox（弹性盒布局模型）以及适用场景" class="headerlink" title="66 请解释一下 CSS3 的 Flexbox（弹性盒布局模型）以及适用场景"></a>66 请解释一下 CSS3 的 Flexbox（弹性盒布局模型）以及适用场景</h2><blockquote><p>1Flexbox1 用于不同尺寸屏幕中创建可自动扩展和收缩布局</p></blockquote><h2 id="67-经常遇到的浏览器的JS兼容性有哪些？解决方法是什么"><a href="#67-经常遇到的浏览器的JS兼容性有哪些？解决方法是什么" class="headerlink" title="67 经常遇到的浏览器的JS兼容性有哪些？解决方法是什么"></a>67 经常遇到的浏览器的JS兼容性有哪些？解决方法是什么</h2><ul><li>当前样式：getComputedStyle(el, null) VS el.currentStyle</li><li>事件对象：e VS window.event</li><li>鼠标坐标：e.pageX, e.pageY VS window.event.x, window.event.y</li><li>按键码：e.which VS event.keyCode</li><li>文本节点：el.textContent VS el.innerText</li></ul><h2 id="68-请写出多种等高布局"><a href="#68-请写出多种等高布局" class="headerlink" title="68 请写出多种等高布局"></a>68 请写出多种等高布局</h2><ul><li>在列的父元素上使用这个背景图进行Y轴的铺放，从而实现一种等高列的假像</li><li>模仿表格布局等高列效果：兼容性不好，在ie6-7无法正常运行</li><li>css3 flexbox 布局： .container{display: flex; align-items: stretch;}</li></ul><h2 id="69-浮动元素引起的问题"><a href="#69-浮动元素引起的问题" class="headerlink" title="69 浮动元素引起的问题"></a>69 浮动元素引起的问题</h2><ul><li>父元素的高度无法被撑开，影响与父元素同级的元素</li><li>与浮动元素同级的非浮动元素会跟随其后</li></ul><h2 id="70-CSS优化、提高性能的方法有哪些"><a href="#70-CSS优化、提高性能的方法有哪些" class="headerlink" title="70 CSS优化、提高性能的方法有哪些"></a>70 CSS优化、提高性能的方法有哪些</h2><ul><li>多个css合并，尽量减少HTTP请求</li><li>将css文件放在页面最上面</li><li>移除空的css规则</li><li>避免使用CSS表达式</li><li>选择器优化嵌套，尽量避免层级过深</li><li>充分利用css继承属性，减少代码量</li><li>抽象提取公共样式，减少代码量</li><li>属性值为0时，不加单位</li><li>属性值为小于1的小数时，省略小数点前面的0</li><li>css雪碧图</li></ul><h2 id="71-浏览器是怎样解析CSS选择器的"><a href="#71-浏览器是怎样解析CSS选择器的" class="headerlink" title="71 浏览器是怎样解析CSS选择器的"></a>71 浏览器是怎样解析CSS选择器的</h2><ul><li>浏览器解析 CSS 选择器的方式是从右到左</li></ul><h2 id="72-在网页中的应该使用奇数还是偶数的字体"><a href="#72-在网页中的应该使用奇数还是偶数的字体" class="headerlink" title="72 在网页中的应该使用奇数还是偶数的字体"></a>72 在网页中的应该使用奇数还是偶数的字体</h2><ul><li>在网页中的应该使用“偶数”字体：<ul><li>偶数字号相对更容易和 web 设计的其他部分构成比例关系</li><li>使用奇数号字体时文本段落无法对齐</li><li>宋体的中文网页排布中使用最多的就是 12 和 14</li></ul></li></ul><h2 id="73-margin和padding分别适合什么场景使用"><a href="#73-margin和padding分别适合什么场景使用" class="headerlink" title="73 margin和padding分别适合什么场景使用"></a>73 margin和padding分别适合什么场景使用</h2><ul><li>需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin</li><li>需要在border内测添加空白，且空白处需要背景（色）时，使用 padding</li></ul><h2 id="74-抽离样式模块怎么写，说出思路"><a href="#74-抽离样式模块怎么写，说出思路" class="headerlink" title="74 抽离样式模块怎么写，说出思路"></a>74 抽离样式模块怎么写，说出思路</h2><ul><li>CSS可以拆分成2部分：公共CSS 和 业务CSS：<ul><li>网站的配色，字体，交互提取出为公共CSS。这部分CSS命名不应涉及具体的业务</li><li>对于业务CSS，需要有统一的命名，使用公用的前缀。可以参考面向对象的CSS</li></ul></li></ul><h2 id="75-元素竖向的百分比设定是相对于容器的高度吗"><a href="#75-元素竖向的百分比设定是相对于容器的高度吗" class="headerlink" title="75 元素竖向的百分比设定是相对于容器的高度吗"></a>75 元素竖向的百分比设定是相对于容器的高度吗</h2><blockquote><p>元素竖向的百分比设定是相对于容器的宽度，而不是高度</p></blockquote><h2 id="76-全屏滚动的原理是什么？-用到了CSS的那些属性"><a href="#76-全屏滚动的原理是什么？-用到了CSS的那些属性" class="headerlink" title="76 全屏滚动的原理是什么？ 用到了CSS的那些属性"></a>76 全屏滚动的原理是什么？ 用到了CSS的那些属性</h2><ul><li>原理类似图片轮播原理，超出隐藏部分，滚动时显示</li><li>可能用到的CSS属性：overflow:hidden; transform:translate(100%, 100%); display:none;</li></ul><h2 id="77-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE"><a href="#77-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE" class="headerlink" title="77 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE"></a>77 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE</h2><ul><li>响应式设计就是网站能够兼容多个终端，而不是为每个终端做一个特定的版本</li><li>基本原理是利用CSS3媒体查询，为不同尺寸的设备适配不同样式</li><li>对于低版本的IE，可采用JS获取屏幕宽度，然后通过resize方法来实现兼容：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  screenRespond();</span><br><span class="line">&#125;);</span><br><span class="line">screenRespond();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">screenRespond</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line"><span class="keyword">if</span>(screenWidth &lt;= <span class="number">1800</span>)&#123;</span><br><span class="line">  $(<span class="string">"body"</span>).attr(<span class="string">"class"</span>, <span class="string">"w1800"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(screenWidth &lt;= <span class="number">1400</span>)&#123;</span><br><span class="line">  $(<span class="string">"body"</span>).attr(<span class="string">"class"</span>, <span class="string">"w1400"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(screenWidth &gt; <span class="number">1800</span>)&#123;</span><br><span class="line">  $(<span class="string">"body"</span>).attr(<span class="string">"class"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="78-什么是视差滚动效果，如何给每页做不同的动画"><a href="#78-什么是视差滚动效果，如何给每页做不同的动画" class="headerlink" title="78 什么是视差滚动效果，如何给每页做不同的动画"></a>78 什么是视差滚动效果，如何给每页做不同的动画</h2><ul><li><p>视差滚动是指多层背景以不同的速度移动，形成立体的运动效果，具有非常出色的视觉体验</p></li><li><p>一般把网页解剖为：背景层、内容层和悬浮层。当滚动鼠标滚轮时，各图层以不同速度移动，形成视差的</p></li><li><p>实现原理</p><ul><li>以 “页面滚动条” 作为 “视差动画进度条”</li><li>以 “滚轮刻度” 当作 “动画帧度” 去播放动画的</li><li>监听 mousewheel 事件，事件被触发即播放动画，实现“翻页”效果</li></ul></li></ul><h2 id="79-a标签上四个伪类的执行顺序是怎么样的"><a href="#79-a标签上四个伪类的执行顺序是怎么样的" class="headerlink" title="79 a标签上四个伪类的执行顺序是怎么样的"></a>79 a标签上四个伪类的执行顺序是怎么样的</h2><blockquote><p>link &gt; visited &gt; hover &gt; active</p></blockquote><ul><li>L-V-H-A love hate 用喜欢和讨厌两个词来方便记忆</li></ul><h2 id="80-伪元素和伪类的区别和作用"><a href="#80-伪元素和伪类的区别和作用" class="headerlink" title="80 伪元素和伪类的区别和作用"></a>80 伪元素和伪类的区别和作用</h2><ul><li>伪元素 – 在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。</li><li>它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;<span class="attribute">content</span>:<span class="string">"第一章："</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;<span class="attribute">content</span>:<span class="string">"Hot!"</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;<span class="attribute">background</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure></div><ul><li>伪类 – 将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;<span class="attribute">color</span>: red&#125;</span><br></pre></td></tr></table></figure></div><h2 id="81-before-和-after-中双冒号和单冒号有什么区别"><a href="#81-before-和-after-中双冒号和单冒号有什么区别" class="headerlink" title="81 ::before 和 :after 中双冒号和单冒号有什么区别"></a>81 ::before 和 :after 中双冒号和单冒号有什么区别</h2><ul><li>在 CSS 中伪类一直用 : 表示，如 :hover, :active 等</li><li>伪元素在CSS1中已存在，当时语法是用 : 表示，如 :before 和 :after</li><li>后来在CSS3中修订，伪元素用 :: 表示，如 ::before 和 ::after，以此区分伪元素和伪类</li><li>由于低版本IE对双冒号不兼容，开发者为了兼容性各浏览器，继续使使用 :after 这种老语法表示伪元素</li><li>综上所述：::before 是 CSS3 中写伪元素的新语法； :after 是 CSS1 中存在的、兼容IE的老语法</li></ul><h2 id="82-如何修改Chrome记住密码后自动填充表单的黄色背景"><a href="#82-如何修改Chrome记住密码后自动填充表单的黄色背景" class="headerlink" title="82 如何修改Chrome记住密码后自动填充表单的黄色背景"></a>82 如何修改Chrome记住密码后自动填充表单的黄色背景</h2><ul><li>产生原因：由于Chrome默认会给自动填充的input表单加上 input:-webkit-autofill 私有属性造成的</li><li>解决方案1：在form标签上直接关闭了表单的自动填充：autocomplete=”off”</li><li>解决方案2：input:-webkit-autofill { background-color: transparent; }</li></ul><p><strong>input [type=search] 搜索框右侧小图标如何美化？</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"search"</span>]</span><span class="selector-pseudo">::-webkit-search-cancel-button</span>&#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"images/searchicon.png"</span>) no-repeat <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">15px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="83-网站图片文件，如何点击下载？而非点击预览"><a href="#83-网站图片文件，如何点击下载？而非点击预览" class="headerlink" title="83 网站图片文件，如何点击下载？而非点击预览"></a>83 网站图片文件，如何点击下载？而非点击预览</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"logo.jpg"</span> <span class="attr">download</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"logo.jpg"</span> <span class="attr">download</span>=<span class="string">"网站LOGO"</span> &gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>iOS safari 如何阻止“橡皮筋效果”</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> stopScrolling = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">          event.preventDefault();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, stopScrolling, <span class="literal">false</span>);</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">'touchmove'</span>, stopScrolling, <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></div><h2 id="84-你对-line-height-是如何理解的"><a href="#84-你对-line-height-是如何理解的" class="headerlink" title="84 你对 line-height 是如何理解的"></a>84 你对 line-height 是如何理解的</h2><ul><li>line-height 指一行字的高度，包含了字间距，实际上是下一行基线到上一行基线距离</li><li>如果一个标签没有定义 height 属性，那么其最终表现的高度是由 line-height 决定的</li><li>一个容器没有设置高度，那么撑开容器高度的是 line-height 而不是容器内的文字内容</li><li>把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中</li><li>line-height 和 height 都能撑开一个高度，height 会触发 haslayout，而 line-height 不会</li></ul><h2 id="85-line-height-三种赋值方式有何区别？（带单位、纯数字、百分比）"><a href="#85-line-height-三种赋值方式有何区别？（带单位、纯数字、百分比）" class="headerlink" title="85 line-height 三种赋值方式有何区别？（带单位、纯数字、百分比）"></a>85 line-height 三种赋值方式有何区别？（带单位、纯数字、百分比）</h2><ul><li>带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高</li><li>纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px</li><li>百分比：将计算后的值传递给后代</li></ul><h2 id="86-设置元素浮动后，该元素的-display-值会如何变化"><a href="#86-设置元素浮动后，该元素的-display-值会如何变化" class="headerlink" title="86 设置元素浮动后，该元素的 display 值会如何变化"></a>86 设置元素浮动后，该元素的 display 值会如何变化</h2><blockquote><p>设置元素浮动后，该元素的 display 值自动变成 block</p></blockquote><h2 id="87-让页面里的字体变清晰，变细用CSS怎么做？（IOS手机浏览器字体齿轮设置）"><a href="#87-让页面里的字体变清晰，变细用CSS怎么做？（IOS手机浏览器字体齿轮设置）" class="headerlink" title="87 让页面里的字体变清晰，变细用CSS怎么做？（IOS手机浏览器字体齿轮设置）"></a>87 让页面里的字体变清晰，变细用CSS怎么做？（IOS手机浏览器字体齿轮设置）</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-font-smoothing</span>: <span class="selector-tag">antialiased</span>;</span><br></pre></td></tr></table></figure></div><h2 id="88-font-style-属性-oblique-是什么意思"><a href="#88-font-style-属性-oblique-是什么意思" class="headerlink" title="88 font-style 属性 oblique 是什么意思"></a>88 font-style 属性 oblique 是什么意思</h2><blockquote><p>font-style: oblique; 使没有 italic 属性的文字实现倾斜</p></blockquote><h2 id="89-display-inline-block-什么时候会显示间隙"><a href="#89-display-inline-block-什么时候会显示间隙" class="headerlink" title="89 display:inline-block 什么时候会显示间隙"></a>89 display:inline-block 什么时候会显示间隙</h2><ul><li>相邻的 inline-block 元素之间有换行或空格分隔的情况下会产生间距</li><li>非 inline-block 水平元素设置为 inline-block 也会有水平间距</li><li>可以借助 vertical-align:top; 消除垂直间隙</li><li>可以在父级加 font-size：0; 在子元素里设置需要的字体大小，消除垂直间隙</li><li>把 li 标签写到同一行可以消除垂直间隙，但代码可读性差</li></ul><h2 id="90-一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"><a href="#90-一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度" class="headerlink" title="90 一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"></a>90 一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度</h2><ul><li>方案1：<ul><li>.sub { height: calc(100%-100px); }</li></ul></li><li>方案2：<ul><li>.container { position:relative; }</li><li>.sub { position: absolute; top: 100px; bottom: 0; }</li></ul></li><li>方案3：<ul><li>.container { display:flex; flex-direction:column; }</li><li>.sub { flex:1; }</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试宝典 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueCli 外部加载CSS 路径无效找不到文件问题</title>
      <link href="/2020/05/26/VueCli-%E5%A4%96%E9%83%A8%E5%8A%A0%E8%BD%BDCSS-%E8%B7%AF%E5%BE%84%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/26/VueCli-%E5%A4%96%E9%83%A8%E5%8A%A0%E8%BD%BDCSS-%E8%B7%AF%E5%BE%84%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看路径是否正确"><a href="#1-查看路径是否正确" class="headerlink" title="1.查看路径是否正确"></a>1.查看路径是否正确</h2><blockquote><p>首先查看是否使用路径别名(@,~),如果使用别名，请查看webpack.base.conf.js文件中的resolve.alias是否设置别名，设置后请重新启动项目。</p></blockquote><blockquote><p>如果使用相对路径请查看相对路径是否正确</p></blockquote><h2 id="2-引用问题"><a href="#2-引用问题" class="headerlink" title="2.引用问题"></a>2.引用问题</h2><blockquote><p>如果使用路径别名，使用@import必须路径印用必须加<del>，如:@import ‘</del>@/assets/css/style.css’。 原因是CSS loader 会把把非根路径的url解释为相对路径， 加~前缀才会解释成模块路径。</p></blockquote><h2 id="3-其他问题"><a href="#3-其他问题" class="headerlink" title="3.其他问题"></a>3.其他问题</h2><blockquote><p>如果路径无错，相对路径可以引入，使用别名无法找到文件，请将项目根目录下的.postcssrc.js中的plugins对象postcss-import属性注释</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 后台管理系统 </tag>
            
            <tag> 权限管理 </tag>
            
            <tag> Vue-Cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/15/hello-world/"/>
      <url>/2020/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript跨域方式</title>
      <link href="/2020/02/08/JavaScript%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/02/08/JavaScript%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在前后端分离和SPA单页面应用盛行的今天，前后端数据交互经常会碰到请求跨域的问题，我这里就不赘述跨域的原理了，单刀直入，解决跨域三种普遍方式。</p></blockquote><h1 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h1><blockquote><p>Jsonp利用了<code>script</code>标签无跨域资源的限制条件，网页得到从其他来源动态产生的JSON数据。JSONP 请求需要前后端协调<code>callback</code>关键字才可以</p></blockquote><p>如果你看不到你上面的tips,没关系，大致的意思是创建一个script从而拿到服务器接口的返回值，但是你会发现好像只有JQ的请求库<code>$.ajax</code>才支持jsonp~~<br>其实JQ请求库也是自己封装一个这样的创建script标签的方法来完成这样的实现，下面列举两个方法实现jsonp</p><h2 id="JQ"><a href="#JQ" class="headerlink" title="JQ"></a>JQ</h2><blockquote><p>JQ实现方法比较简单，因为他本身封装号了jsonp的实现，直接上代码</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url, <span class="comment">//这里参数填写请求接口url</span></span><br><span class="line">    method: <span class="string">'POST'</span>, <span class="comment">// 就算是是写POST 实际jsonp只能是GET方式请求</span></span><br><span class="line">    data: data,  <span class="comment">// 请求参数</span></span><br><span class="line">    dataType: <span class="string">'jsonp'</span>, <span class="comment">// 请求方式，务必是jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">'callback'</span>, <span class="comment">// 与后端协定的关键字</span></span><br><span class="line">    success (rel) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(rel) <span class="comment">// 接口成功返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="jsonp封装"><a href="#jsonp封装" class="headerlink" title="jsonp封装"></a>jsonp封装</h2><blockquote><p>你会发现原生<code>XMLHttpRequest</code>和知名请求库<code>axios</code>并不支持jsonp的请求方式(因为他们完全是两种不一样的东西)，这时候可以自己封装个方法~</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jsonp (obj) &#123;</span><br><span class="line">    <span class="comment">// 定义一个处理Jsonp返回数据的回调函数</span></span><br><span class="line">    <span class="built_in">window</span>[<span class="string">'callback'</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">object</span>) </span>&#123;</span><br><span class="line">    obj.success(object)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="comment">// 组合请求URL</span></span><br><span class="line">    script.src = obj.url + <span class="string">'?callback=callback'</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj.data) &#123;</span><br><span class="line">    script.src += <span class="string">'&amp;'</span> + key + <span class="string">'='</span> + obj.data[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将创建的新节点添加到BOM树上</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(script)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p>使用时候可以直接调用jsonp,然后传入对象，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.jsonp(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    data: data,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="后端协调"><a href="#后端协调" class="headerlink" title="后端协调"></a>后端协调</h2><blockquote><p>这时候你开心的完成上面的步骤后发现，事情没有那么简单~<br><a href="http://img.mgblog.cn/662b8f2be5757adfa874e8269d99ebad.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.mgblog.cn/662b8f2be5757adfa874e8269d99ebad.png" class="lazyload"></a><br>报错了，还记得我之前说的吗？jsonp需要前后端协调<code>callback</code>关键字才可以,这时候你就要请后端大佬喝一杯冰阔落，让他加上关键字返回，JQ默认关键字是<code>callback</code>,自己封装的可以自行调整哦~</p></blockquote><p>下面列出PHP后端调整代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-type:application/json;charset=utf-8"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span><span class="params">($data=array<span class="params">(<span class="string">'message'</span>=&gt;<span class="string">''</span>)</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 返回成功json使用</span></span><br><span class="line">    $callback = <span class="keyword">isset</span>($_GET[<span class="string">'callback'</span>]) ? trim($_GET[<span class="string">'callback'</span>]) : <span class="string">''</span>; <span class="comment">// 接收前端jsonp回调参数</span></span><br><span class="line">    $arrayName = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'type'</span> =&gt; <span class="string">'success'</span>,</span><br><span class="line">        <span class="string">'body'</span>=&gt;$data</span><br><span class="line">    );</span><br><span class="line">    $tmp= stripslashes(json_encode($arrayName,JSON_UNESCAPED_UNICODE));</span><br><span class="line">    <span class="keyword">echo</span> $callback . <span class="string">'('</span> . $tmp .<span class="string">')'</span>;  <span class="comment">//返回格式需要callback关键字在最前面</span></span><br><span class="line">&#125;</span><br><span class="line">success(<span class="keyword">array</span>(<span class="string">'message'</span>=&gt;<span class="string">'this is jsonp'</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>实际前端在开发者工具中的<code>Network</code>中查看请求是这样的<br><a href="http://img.mgblog.cn/d5d30735b0e63836e1f350cc938360e1.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.mgblog.cn/d5d30735b0e63836e1f350cc938360e1.png" class="lazyload"></a><br>但是直接获取到的返回，是对象哦<del>~</del><br><a href="http://img.mgblog.cn/c2dd56831da4fec08e587b1b6202d976.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.mgblog.cn/c2dd56831da4fec08e587b1b6202d976.png" class="lazyload"></a></p><h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><blockquote><p>Proxy实际上就是利用服务器，进行接口的代理转发请求，他不需要后端人员配合，只需要配置服务器开启代理转发的相应参数即可。在vue-cli中我们可以使用node.js服务器的便利，设置<code>proxyTable</code>相应参数，轻松达到接口转发功能。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://www.api.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">            <span class="string">'^/api'</span>: <span class="string">'/'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用时，我们可以直接<code>/api/***.php</code>即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">'/api/api.php'</span> <span class="comment">// 实际上等于请求http://www.api.com/api.php</span></span><br><span class="line"><span class="keyword">let</span> data= &#123;&#125;</span><br><span class="line"><span class="keyword">this</span>.$http.post(url, data).then(<span class="function"><span class="params">rel</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(rel)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="运维协调"><a href="#运维协调" class="headerlink" title="运维协调"></a>运维协调</h2><blockquote><p>在不管是在vue-cli中还是还是普通开发环境下，接口的代理转发都是依赖服务器来进行，所以当项目打包上线后项目将脱离node的环境，没有node的服务到一个新的服务器中运行，这时候如果不在新服务环境中配置代理转发，接口将会是404。</p></blockquote><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><blockquote><p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p></blockquote><p>简单的来说就算让后端的接口中添加几个请求头，允许前端跨域访问。如以下PHP添加的请求头：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Allow-Origin: *'</span>); <span class="comment">// *代表允许任何网址请求,也可以直接设置域名，如：</span></span><br><span class="line"><span class="comment">// header('Access-Control-Allow-Origin: http://www.el.com');</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE'</span>); <span class="comment">// 允许请求的类型</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Credentials: true'</span>); <span class="comment">// 设置是否允许发送 cookies</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers: Content-Type,Content-Length,Accept-Encoding,X-Requested-with, Origin'</span>); <span class="comment">// 设置允许自定义请求头的字段</span></span><br></pre></td></tr></table></figure></div><p>这种方式虽然有点不安全，但是方便、简洁、有效的解决的跨域带来的困扰</p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue后台管理之登陆权限列表以及按钮权限</title>
      <link href="/2020/02/05/Vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E4%B9%8B%E7%99%BB%E9%99%86%E6%9D%83%E9%99%90%E4%BB%A5%E5%8F%8A%E6%8C%89%E9%92%AE%E6%9D%83%E9%99%90/"/>
      <url>/2020/02/05/Vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E4%B9%8B%E7%99%BB%E9%99%86%E6%9D%83%E9%99%90%E4%BB%A5%E5%8F%8A%E6%8C%89%E9%92%AE%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><blockquote><p>请先预览一篇关于<a href="https://blog.csdn.net/weixin_34327223/article/details/93688990" target="_blank" rel="noopener">手摸手，带你用vue撸后台 系列二(登录权限篇)</a>，如果这篇你能看的懂，就不用往下看了<br>此篇文章是基于vue-element-admin简化过来的，所以可以先查看<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js" target="_blank" rel="noopener">vue-element-admin源码地址</a>。</p></blockquote><hr><h2 id="登陆权限列表"><a href="#登陆权限列表" class="headerlink" title="登陆权限列表"></a>登陆权限列表</h2><h3 id="初始化路由细信息"><a href="#初始化路由细信息" class="headerlink" title="初始化路由细信息"></a>初始化路由细信息</h3><blockquote><p>首先要准备两个数组，一个数组拥有全部路由的的信息，一个数组是初始化的路由数组，里面只有404页面，登录页面，还有一些不用权限的页面，我这里将他们封装在一个js,然后用export暴露出去，到时候在router.js中引入。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;假设ROETER 是所有路由信息的数组</span><br><span class="line">export const ROETER &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Goods&#39;,</span><br><span class="line">    name: &#39;Goods&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;Goods&#x2F;goodsList&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goods&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;商品&#39;,</span><br><span class="line">      icon: &#39;el-icon-goods&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsList&#39;,</span><br><span class="line">        name: &#39;goodsList&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsList.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;商品列表&#39;,</span><br><span class="line">          icon: &#39;el-icon-tickets&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: &#39;&#x2F;Goods&#x2F;goodsList&#x2F;select&#x2F;:type&#39;,</span><br><span class="line">            name: &#39;goodsList_item&#39;,</span><br><span class="line">            component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;List_item.vue&#39;),</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: &#39;商品详情&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            path: &#39;&#x2F;Goods&#x2F;goodsList&#x2F;install&#x2F;:type&#39;,</span><br><span class="line">            name: &#39;goodsList_item_install&#39;,</span><br><span class="line">            component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;List_item_install.vue&#39;),</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: &#39;商品设置&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                path: &#39;&#x2F;Goods&#x2F;goodsList&#x2F;install&#x2F;:type&#x2F;types&#39;,</span><br><span class="line">                name: &#39;goodsList_item_install_types&#39;,</span><br><span class="line">                component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;list_item_type.vue&#39;),</span><br><span class="line">                meta: &#123;</span><br><span class="line">                  title: &#39;商品规格&#39;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsAdd&#39;,</span><br><span class="line">        name: &#39;goodsAdd&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsAdd.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;添加商品&#39;,</span><br><span class="line">          icon: &#39;el-icon-sold-out&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsItem&#39;,</span><br><span class="line">        name: &#39;goodsItem&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsItem.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;商品类型&#39;,</span><br><span class="line">          icon: &#39;el-icon-more&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsBrand&#39;,</span><br><span class="line">        name: &#39;goodsBrand&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsBrand.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;品牌列表&#39;,</span><br><span class="line">          icon: &#39;el-icon-news&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Order&#39;,</span><br><span class="line">    name: &#39;Order&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;Order&#x2F;Orderlist&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;index&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;订单管理&#39;,</span><br><span class="line">      icon: &#39;el-icon-document&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Order&#x2F;Orderlist&#39;,</span><br><span class="line">        name: &#39;Orderlist&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;Orderlist&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;订单列表&#39;,</span><br><span class="line">          icon: &#39;el-icon-tickets&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: &#39;&#x2F;Order&#x2F;Orderlist&#x2F;:id&#39;,</span><br><span class="line">            name: &#39;Order_item&#39;,</span><br><span class="line">            component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;Order_item.vue&#39;),</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: &#39;订单设置&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Order&#x2F;OrderReturn&#39;,</span><br><span class="line">        name: &#39;OrderReturn&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;OrderReturn&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;退货处理&#39;,</span><br><span class="line">          icon: &#39;el-icon-sort&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Order&#x2F;Return&#39;,</span><br><span class="line">        name: &#39;Return&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;Return&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;退货原因处理&#39;,</span><br><span class="line">          icon: &#39;el-icon-rank&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Useer&#39;,</span><br><span class="line">    name: &#39;Useer&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;user&#x2F;index&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;用户管理&#39;,</span><br><span class="line">      icon: &#39;el-icon-view&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Adminis&#39;,</span><br><span class="line">    name: &#39;Adminis&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Adminis&#x2F;index&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;后台管理&#39;,</span><br><span class="line">      icon: &#39;el-icon-setting&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; fistroutes是还未登录时候，初始的router数组</span><br><span class="line">export const fistroutes &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;index&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;index&#39;),</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;index&#39;,</span><br><span class="line">        name: &#39;first&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;first&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;统计页&#39;,</span><br><span class="line">          icon: &#39;el-icon-menu&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;首页&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;login&#39;,</span><br><span class="line">    name: &#39;login&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;login&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;登陆&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;&#x2F;&#x2F; 404</span><br><span class="line">    path: &#39;&#x2F;404&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;ErrPage&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; &#x2F;&#x2F; 重定向到404</span><br><span class="line">    path: &#39;*&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;404&#39;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><h3 id="初始化router-js"><a href="#初始化router-js" class="headerlink" title="初始化router.js"></a>初始化router.js</h3><p>确定好这两个数组后，我们就要去初始化router.js了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">&#x2F;&#x2F;先引入两个数组</span><br><span class="line">import &#123;ROETER, fistroutes&#125; from &#39;@&#x2F;assets&#x2F;js&#x2F;router_mun.js&#39;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将初始化的数组fistroutes赋值给routes，</span><br><span class="line">var router &#x3D; new Router(&#123;</span><br><span class="line">  routes: fistroutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;路由拦截</span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F;  如果是其他需要路由页面则进行权限判断</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure></div><p>初始化router.js，首先我们做个全局路由拦截，每次跳转判断是不是在登录页面，如果是登录页面无条件放行~<br>然后将router.js 在main.js中引入<del>~</del></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">&#x2F;&#x2F; 引入router.js</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="登录获取获取token以及权限列表"><a href="#登录获取获取token以及权限列表" class="headerlink" title="登录获取获取token以及权限列表"></a>登录获取获取token以及权限列表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> this.login().then((data) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 获取token</span><br><span class="line">    setToken(&#39;utoken&#39;, data.token)</span><br><span class="line">    setToken(&#39;uID&#39;, data.uid)</span><br><span class="line">    this.tipsShow(&#39;登陆成功&#39;).then(data &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 返回操作权限列表</span><br><span class="line">        &#x2F;&#x2F; 假设后端返回的权限列表为这样的数组（按道理来说一般参数比较多）</span><br><span class="line">        let APItest &#x3D; [</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#39;Goods&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#39;Order&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">        &#x2F;&#x2F; 将权限列表存储在session中，方便拿出来</span><br><span class="line">        sessionStorage.setItem(&#39;list&#39;, JSON.stringify(APItest))</span><br><span class="line">        &#x2F;&#x2F; 然后跳转到index页面</span><br><span class="line">        this.$router.push(&#123;path: &#39;&#x2F;index&#39;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ol><li><p>这里可以看到我存储token是使用setToken()一个方法，这个方法是我封装好的方法，后期会存储进入cookie，使用cookie存储可以方便API请求时候进行携带cookie进行请求（你问跨域怎么携带cookie请求？后续我会开篇文章讲跨域）</p></li><li><p>而存储权限列表是使用session，因为我需求是当浏览器重新打开需要重新登录，所以使用了session当然你也可以使用localStorage进行存储权限列表。</p></li><li><p>因为是数组所以存储之前JSON.stringify转换成json字符串进行存储，并且命名为list,方便之后拿出来~</p></li></ol><h3 id="路由权限对比生成"><a href="#路由权限对比生成" class="headerlink" title="路由权限对比生成"></a>路由权限对比生成</h3><blockquote><p>登录后获取到后端返回token与权限路由list后，返回router.js进行对比添加路由数组,因为登录后跳转到index页面。这里会出发路由拦截。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 还记得刚才在router.js 的路由拦截吗</span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; </span><br><span class="line">        &#x2F;&#x2F; 检查用户是否有token,是否登录</span><br><span class="line">    &#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">      next(&#39;&#x2F;login&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ol><li>首先检查以下是否有cookie中token值（这里getToken()方法是我封装获取token值用~）</li><li>如果没有token值说明没有登录<del>~</del>返回登录页面。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; </span><br><span class="line">    &#x2F;&#x2F; 检查用户是否有token,是否登录</span><br><span class="line">    if (from.name &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 路由来自：如果强制刷新则未空</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        sessionStorage.setItem(&#39;new&#39;, to.path)</span><br><span class="line">    &#125;</span><br><span class="line">    data ? next() : next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">    next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ol><li>注意这里判断了以下上了页面的name,是为了防止用户强制F5刷新页面，导致路由信息消失</li><li>如果form.name===null,代表用户刷新页面，需要重新生成路由信息，否在登录的时候生成一次就行，</li><li>如果上个页面路由信息不为空，将存储现在的页面信息，防止用户刷新后路由重新生成后跳转到不存的路由</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; </span><br><span class="line">    if (from.name &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 路由来自：如果强制刷新则未空</span><br><span class="line">        &#x2F;&#x2F; 登陆后获取权限路由存储到的list；</span><br><span class="line">        let returnRouter &#x3D; JSON.parse(sessionStorage.getItem(&#39;list&#39;))</span><br><span class="line">        &#x2F;&#x2F; 获取到当前的路由列表</span><br><span class="line">        let routes &#x3D; router.options.routes</span><br><span class="line">        &#x2F;&#x2F; 生成动态路由</span><br><span class="line">        if (returnRouter &amp;&amp; routes[0].children.length &lt;&#x3D; 1) &#123;</span><br><span class="line">            ROETER.forEach((i, v) &#x3D;&gt; &#123;</span><br><span class="line">                returnRouter.forEach((item, index) &#x3D;&gt; &#123;</span><br><span class="line">                    if (i.name &#x3D;&#x3D;&#x3D; item.name) &#123;</span><br><span class="line">                        &#x2F;&#x2F; push()加入现有的权限列表中</span><br><span class="line">                        routes[0].children.push(i)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            router.addRoutes(router.options.routes)</span><br><span class="line">            let pathName &#x3D; sessionStorage.getItem(&#39;new&#39;)</span><br><span class="line">            next(pathName)</span><br><span class="line">        &#125; else if (!returnRouter) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取不到权限路由返回</span><br><span class="line">            next(&#39;&#x2F;login&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    sessionStorage.setItem(&#39;new&#39;, to.path)</span><br><span class="line">    &#125;</span><br><span class="line">    data ? next() : next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">    next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><blockquote><p>这里就是重头戏了，获取权限列表，生成权限列表，其实功能就是：获取登录后list权限列表然后将他与全部路由信息ROETER比较。然后push加入现有的权限列表中</p></blockquote><ol><li>这里注意<code>routes[0].children.push(i)</code> 加如权限列表后还不会显示的，需要执行一个API<code>router.addRoutes(router.options.routes)</code>，这样returnRouter就是初始列表+已有的权限列表了</li><li>生成权限列表后 在重新next,就OK了~~</li></ol><p>下面贴完整的router.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">import &#123;getToken, delCookie&#125; from &#39;@&#x2F;assets&#x2F;js&#x2F;config.js&#39;</span><br><span class="line">import &#123;ROETER, fistroutes&#125; from &#39;@&#x2F;assets&#x2F;js&#x2F;router_mun.js&#39;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">var router &#x3D; new Router(&#123;</span><br><span class="line">  routes: fistroutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; &#x2F;&#x2F; 检查用户是否有token,是否登录</span><br><span class="line">      if (from.name &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 路由来自：如果强制刷新则未空</span><br><span class="line">        &#x2F;&#x2F; 登陆后获取权限路由存储到的list；</span><br><span class="line">        let returnRouter &#x3D; JSON.parse(sessionStorage.getItem(&#39;list&#39;))</span><br><span class="line">        let routes &#x3D; router.options.routes</span><br><span class="line">        &#x2F;&#x2F; 生成动态路由</span><br><span class="line">        if (returnRouter &amp;&amp; routes[0].children.length &lt;&#x3D; 1) &#123;</span><br><span class="line">          ROETER.forEach((i, v) &#x3D;&gt; &#123;</span><br><span class="line">            returnRouter.forEach((item, index) &#x3D;&gt; &#123;</span><br><span class="line">              if (i.name &#x3D;&#x3D;&#x3D; item.name) &#123;</span><br><span class="line">                routes[0].children.push(i)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          router.addRoutes(router.options.routes)</span><br><span class="line">          let pathName &#x3D; sessionStorage.getItem(&#39;new&#39;)</span><br><span class="line">          next(pathName)</span><br><span class="line">        &#125; else if (!returnRouter) &#123;</span><br><span class="line">          &#x2F;&#x2F; 获取不到权限路由返回</span><br><span class="line">          next(&#39;&#x2F;login&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        sessionStorage.setItem(&#39;new&#39;, to.path)</span><br><span class="line">      &#125;</span><br><span class="line">      data ? next() : next(&#39;&#x2F;login&#39;)</span><br><span class="line">      &#x2F;&#x2F; 记录每次跳转的路由，刷新不掉队</span><br><span class="line">    &#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">      next(&#39;&#x2F;login&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>tips:</strong><br>1.以下这个是针对大类进行添加，如果还要筛选小类的遍历，还有多遍历一层数组，当然你也可以封装一个方法，递归遍历。<br>2.刷新页面或者重复登录，可能会造成路由重复添加的警告出现，只是警告并没有错误，刷新页面可以重置路由，但是体验不太好，所以我没用。<br>3.可能大家的后端返回和我不一样，不过基本上都是比对后端返回的name进行添加，请结合后端返回实际情况使用。</p></blockquote><h2 id="权限按钮"><a href="#权限按钮" class="headerlink" title="权限按钮"></a>权限按钮</h2><blockquote><p>一般来说针对到按钮都是后端对接口进行权限认证，前端没有必要细化到每个按钮做权限，但是要做还是可以做的，这里我用到Vue自定义指令进行做每个按钮的权限认证。</p></blockquote><p>首先我们先<code>mock</code>一些数据进行测试</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    假设这是登录成功时候，后端返回json数据，获取到的可以点击的按钮列表，我们将他们存储到sessionStorage或者localStorage中 </span><br><span class="line">**&#x2F;</span><br><span class="line">let list&#x3D; [&#39;admin&#39;,&#39;add&#39;,&#39;delete&#39;];</span><br><span class="line">sessionStorage.setItem(&#39;permission_button&#39;, JSON.stringify(list))</span><br></pre></td></tr></table></figure></div><p>然后在main.js中增加全局自定义指令进行设置~~</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;btnlimit&#39;, &#123;</span><br><span class="line">    inserted: function (el,binding) &#123;</span><br><span class="line">        let permissionList &#x3D; sessionStorage.getItem(&#39;permission_button&#39;);</span><br><span class="line">        if (!permissionList.includes(binding.value)) &#123;</span><br><span class="line">            el.parentNode.removeChild(el)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>当我们需要确定某个按钮需要什么权限时候可以使用v-btnlimit=’所需权限字符串’。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-btnlimit&#x3D;&#39;&quot;admin&quot;&#39; type&#x3D;&quot;button&quot; name&#x3D;&quot;admin&quot; value&#x3D;&quot;admin按钮&quot;  id&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">&lt;input v-btnlimit&#x3D;&#39;&quot;updata&quot;&#39; type&#x3D;&quot;button&quot; name&#x3D;&quot;updata&quot; value&#x3D;&quot;updata按钮&quot;  id&#x3D;&quot;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></div><p>上面的只会显示admin按钮，因为存储在session数组中他没有updata权限，这样就是一个简单的按钮权限设置了~~</p><blockquote><p><strong>tips:</strong><br>1.通过自定义指令实现绑定权限的按钮方便，而且可以动态配置，可以联合后端增加更多的权限字段。<br>2.虽然可以配置很多权限字段，但是还是需要手动为代码配置上相应的权限字段，所以还是有所不便~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 后台管理系统 </tag>
            
            <tag> 权限管理 </tag>
            
            <tag> Vue-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo从零开始搭建博客</title>
      <link href="/2020/02/04/hexo%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/02/04/hexo%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h2><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>因为需要npm进行安装和node.js进行编译运行环境，请进入下列网址根据自身系统进行下载并安装node.js。(安装一直下一步即可)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;download&#x2F;</span><br></pre></td></tr></table></figure></div><p>下载完成后，请打开各系统自带的终端</p><blockquote><p>window: win+R 输入’cmd’</p></blockquote><blockquote><p>masOS: Command+空格 搜索输入 终端</p></blockquote><p>打开终端后输入 <code>node -v</code>或<code>npm -v</code>,输出node.js版本号/npm版本号，确认node.js安装成功。</p><h4 id="node-js安装错误"><a href="#node-js安装错误" class="headerlink" title="node.js安装错误"></a>node.js安装错误</h4><ul><li>1.npm（node）不是内部或外部命令<br>  是因为node.js安装完毕后没有加入windows全局变量所致，百度查询：nodejs环境变量配置，配置完成后重启生效</li></ul><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>因为后期需要将生成的博客上传到github/码云/gitlab进行浏览，请进入下列网址根据自身系统进行下载并安装git。(安装一直下一步即可)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;git-scm.com&#x2F;</span><br></pre></td></tr></table></figure></div><p>打开终端后输入 git –version,输出git版本号，确认git安装成功。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">&#x2F;&#x2F;输出版本号</span><br><span class="line">git version 2.23.0.windows.1</span><br></pre></td></tr></table></figure></div><p>然后配置全局git，告诉git你的名字和Email地址(<code>需要先注册github账号确认好自己的用户名和邮箱</code>)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的账户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></div><p>配置成功后可以查看刚才配置的信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看账户名</span><br><span class="line">git config user.name</span><br><span class="line">&#x2F;&#x2F; 查看邮箱</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></div><h4 id="git-js安装错误"><a href="#git-js安装错误" class="headerlink" title="git.js安装错误"></a>git.js安装错误</h4><ul><li>1.git不是内部或外部命令<br>  是因为git安装完毕后没有加入windows全局变量所致，百度查询：git环境变量配置，配置完成后重启生效</li></ul><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><p>cnpm是淘宝团队做的国内镜像，因为npm的服务器位于国外可能会影响安装。淘宝镜像与官方同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br>在终端中输入以下命令安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div><p>安装完成后，查看cnpm版本，确认安装成功</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure></div><hr><h2 id="安装hexo与初始化"><a href="#安装hexo与初始化" class="headerlink" title="安装hexo与初始化"></a>安装hexo与初始化</h2><h3 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h3><p>打开终端，输入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></div><p>安装完成后，查看hexo版本号</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br><span class="line">&#x2F;&#x2F; 输出以下hexo依赖环境，证明hexo全局安装成功</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Windows_NT 10.0.18362 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.16.3</span><br><span class="line">v8: 6.8.275.32-node.54</span><br><span class="line">uv: 1.28.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 4</span><br><span class="line">openssl: 1.1.1c</span><br><span class="line">icu: 64.2</span><br><span class="line">unicode: 12.1</span><br><span class="line">cldr: 35.1</span><br><span class="line">tz: 2019a</span><br></pre></td></tr></table></figure></div><h3 id="初始化创建博客"><a href="#初始化创建博客" class="headerlink" title="初始化创建博客"></a>初始化创建博客</h3><blockquote><p>注意当前想要创建博客的目录，可以windows可以在终端查看当前所在目录，masOS使用<code>pwd</code>命令进行查看。q<br>想要切换目录，windows可以直接使用 盘符 + cd 命令如，masOS 直接使用cd命令进行切换目录</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:</span><br><span class="line">&#x2F;&#x2F; 切换目录到D盘</span><br><span class="line">cd .&#x2F;blog</span><br><span class="line">&#x2F;&#x2F; 切换目录到当前盘符下的blog文件夹下</span><br></pre></td></tr></table></figure></div><p>首先创建个目录，将承载blog生成的文件，这里就叫blog文件夹了，然后使用上面的命令切换至blog文件夹中，准备开始初始化博客工作。</p><h4 id="hexo-init命令"><a href="#hexo-init命令" class="headerlink" title="hexo init命令"></a>hexo init命令</h4><blockquote><p>hexo init命令用于初始化一个博客，生成一个博客所需的所有默认文件,<code>masOS可以使用:sudo hexo init命令进行初始化，sudo代表管理员模式</code></p></blockquote><p>初始化完成后，hexo将会提示<code>INFO Start blogging with Hexo</code>，代表初始化成功。他会在你指定的文件夹下生成hexo博客必须的文件。</p><blockquote><p>.gitignore:  git上传配置文件<br>_config.yml:  hexo博客配置文件(所有配置都基于此处)<br>package-lock.json/package.json:  hexo依赖库配置文件<br>scaffolds:  hexo初始生成的页面文件夹(通常不动)<br>source:  hexo资源文件，和子页面承载文件夹<br>themes:  模板文件夹(初始化的时候会生成landscape模板。后期可以自由更换博客模板)</p></blockquote><h4 id="hexo-s-hexo-server"><a href="#hexo-s-hexo-server" class="headerlink" title="hexo s/hexo server"></a>hexo s/hexo server</h4><blockquote><p>hexo s或者hexo server 启动服务器，运行博客。</p></blockquote><p>初始化完成后，可以开始使用<code>hexo s</code>启动博客看下初始博客样式啦~<br><a href="http://img.mgblog.cn/2a523699945f982861016e8dd111c4f9.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.mgblog.cn/2a523699945f982861016e8dd111c4f9.png" class="lazyload"></a></p><h5 id="hexo-s启动可能遇到的错误"><a href="#hexo-s启动可能遇到的错误" class="headerlink" title="hexo s启动可能遇到的错误"></a>hexo s启动可能遇到的错误</h5><ul><li>1.ERROR Try running: ‘npm install hexo –save’<br>博客目录中没有存在node_modules存放依赖库的文件夹，可以使用<code>npm install</code>命令生成node_modules</li><li>2.Usage: hexo &lt;command&gt;<br>Hexo 3.0 把服务器独立成了个别模块，如果想使用hexo s您必须先安装 hexo-server 才能使用。<br>使用<code>npm install hexo-server --save</code>进行安装</li></ul><h4 id="hexo-new-lt-title-gt"><a href="#hexo-new-lt-title-gt" class="headerlink" title="hexo new &lt;title&gt;"></a>hexo new &lt;title&gt;</h4><blockquote><p>hexo new &lt;title&gt;新建一篇文章。如果标题包含空格的话，请使用引号括起来。</p></blockquote><p>初始化完成后可以使用 hexo new ‘title’来新建一篇文章</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#39;title&#39;</span><br><span class="line">INFO  Created: D:\博客\blog\source\_posts\title.md</span><br></pre></td></tr></table></figure></div><p>建立后会提示博客建立的地址，基本在会在博客目录下的source/_posts目录下，然后使用md文件编辑语法进行编辑文章。</p><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><blockquote><p>hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p></blockquote><p>在新建文章和编辑文章保存后，要进行缓存清除，保证文章始终更新</p><h4 id="hexo-generate-hexo-g"><a href="#hexo-generate-hexo-g" class="headerlink" title="hexo generate/hexo g"></a>hexo generate/hexo g</h4><blockquote><p>hexo generate 重新生成静态文件。该命令可以简写为hexo g</p></blockquote><p>博客缓存清除后，要再次生成静态文件。然后在重新启动服务<code>hexo s</code></p><hr><h2 id="部署远端gitHub"><a href="#部署远端gitHub" class="headerlink" title="部署远端gitHub"></a>部署远端gitHub</h2><blockquote><p>1.需要拥有github账号<br>2.配置好git config –global user.name “你的账户名”与git config –global user.email “你的邮箱”</p></blockquote><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>登录上github后，点击new repository，创建新仓库，仓库名必须为<code>用户名.github.io</code>,仓库名前缀必须为用户名不能是其他，否则github page访问不了。<br><a href="http://img.mgblog.cn/e7c656a5b89fc3e51b924d9fb769e5f8.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.mgblog.cn/e7c656a5b89fc3e51b924d9fb769e5f8.png" class="lazyload"></a><br>仓库说明（Description）可以随便填~</p><h3 id="安装部署器hexo-deployer-git"><a href="#安装部署器hexo-deployer-git" class="headerlink" title="安装部署器hexo-deployer-git"></a>安装部署器hexo-deployer-git</h3><blockquote><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。hexo deploy（可简写成hexo d）,但是必须要安装部署器hexo-deployer-git。</p></blockquote><p>在博客的目录中使用以下命令进行安装：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div><p>安装完成后需要修改博客目录中的_config.yml文件中的一些配置信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git  &#x2F;&#x2F;默认填写git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;usermane&#x2F;usermane.github.io.git  &#x2F;&#x2F; 远程仓库地址</span><br><span class="line">  branch: master &#x2F;&#x2F;提交到所在分支，默认提交到master分支就好</span><br></pre></td></tr></table></figure></div><p>注意冒号后面要有空格！！！！</p><p>repo参数需要点击进刚才创建的github仓库中获取，如图所示：<br><a href="http://img.mgblog.cn/12f8743fdb048ec51d455eaa0c20251d.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.mgblog.cn/12f8743fdb048ec51d455eaa0c20251d.png" class="lazyload"></a></p><p>将参数填写完成后，准备开始部署远端。</p><h3 id="hexo-d-部署远端命令"><a href="#hexo-d-部署远端命令" class="headerlink" title="hexo d 部署远端命令"></a>hexo d 部署远端命令</h3><blockquote><p>使用hexo d 自动打包部署到远端，如果你是第一次部署，可能会提示叫你输入github账户密码，输入后就github仓库内就有内容了~</p></blockquote><p><a href="http://img.mgblog.cn/9b63803dc79dc0070f39a07f77160668.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" title="image" data-src="http://img.mgblog.cn/9b63803dc79dc0070f39a07f77160668.png" class="lazyload"></a></p><blockquote><p>注意输出密码的时候他不会显示占位符合，如果出现输入没占位符，继续按正常输出即可。</p></blockquote><h3 id="使用用户名-github-io访问博客内容"><a href="#使用用户名-github-io访问博客内容" class="headerlink" title="使用用户名.github.io访问博客内容"></a>使用<code>用户名.github.io</code>访问博客内容</h3><blockquote><p>直接使用<code>用户名.github.io</code>进行访问，这样别人也能访问到你的博客内容了~~</p></blockquote><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><blockquote><p> <strong>Q:我上传完github后为什么页面显示404.</strong><br> A:页面上传后需要一定等待时间响应,如果10分钟后还访问404，请重复hexo clean和hexo g -d，清除博客缓存与重新生成并上传</p></blockquote><blockquote><p> <strong>Q:hexo server启动服务，在浏览器访问，看到只Cannot GET / 几个字</strong><br> A:请看看本地博客目录中是否存在public目录，如果不存在执行hexo c，hexo g重新生成一次，如果还不行，请安装以下文件进行尝试<br> npm install hexo-renderer-ejs–save<br> npm install hexo-renderer-stylus–save<br> npm install hexo-renderer-marked–save</p></blockquote><p>如果还有更多问题请留言私信给我，或者请点击<a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">学习链接</a>进行更详细的教学。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
