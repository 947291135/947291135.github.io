<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ming的博客</title>
  
  <subtitle>小小前端,改变世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mgblog.cn/"/>
  <updated>2020-12-03T03:18:32.000Z</updated>
  <id>http://www.mgblog.cn/</id>
  
  <author>
    <name>Ming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试宝典-基础篇</title>
    <link href="http://www.mgblog.cn/2020/12/03/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://www.mgblog.cn/2020/12/03/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8-%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2020-12-03T03:11:58.000Z</published>
    <updated>2020-12-03T03:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、HTML、HTTP、web综合问题"><a href="#一、HTML、HTTP、web综合问题" class="headerlink" title="一、HTML、HTTP、web综合问题"></a>一、HTML、HTTP、web综合问题</h1><h2 id="1-前端需要注意哪些SEO"><a href="#1-前端需要注意哪些SEO" class="headerlink" title="1 前端需要注意哪些SEO"></a>1 前端需要注意哪些SEO</h2><ul><li>合理的<code>title</code>、<code>description</code>、<code>keywords</code>：搜索对着三项的权重逐个减小，<code>title</code>值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</li><li>语义化的<code>HTML</code>代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li><li>重要内容不要用js输出：爬虫不会执行js获取内容</li><li>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</li><li>非装饰性图片必须加<code>alt</code></li><li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li></ul><h2 id="2-lt-img-gt-的title和alt有什么区别"><a href="#2-lt-img-gt-的title和alt有什么区别" class="headerlink" title="2 &lt;img&gt;的title和alt有什么区别"></a>2 <code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h2><ul><li>通常当鼠标滑动到元素上的时候显示</li><li><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li></ul><h2 id="3-HTTP的几种请求方法用途"><a href="#3-HTTP的几种请求方法用途" class="headerlink" title="3 HTTP的几种请求方法用途"></a>3 HTTP的几种请求方法用途</h2><ul><li><p>GET方法</p><ul><li>发送一个请求来取得服务器上的某一资源</li></ul></li><li><p>POST方法</p><ul><li>向URL指定的资源提交数据或附加新的数据</li></ul></li><li><p>PUT方法</p><ul><li>POST方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而POST没有</li></ul></li><li><p>HEAD方法</p><ul><li>只请求页面的首部</li></ul></li><li><p>DELETE方法</p><ul><li>删除服务器上的某资源</li></ul></li><li><p>OPTIONS方法</p><ul><li>它用于获取当前URL所支持的方法。如果请求成功，会有一个Allow的头包含类似“GET,POST”这样的信息</li></ul></li><li><p>TRACE方法</p><ul><li>TRACE方法被用于激发一个远程的，应用层的请求消息回路</li></ul></li><li><p>CONNECT方法</p><ul><li>把请求连接转换到透明的TCP/IP通道</li></ul></li></ul><h2 id="4-从浏览器地址栏输入url到显示页面的步骤"><a href="#4-从浏览器地址栏输入url到显示页面的步骤" class="headerlink" title="4 从浏览器地址栏输入url到显示页面的步骤"></a>4 从浏览器地址栏输入url到显示页面的步骤</h2><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3><ul><li>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；</li><li>浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数- - 据结构（如HTML的DOM）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ul><h3 id="详细版"><a href="#详细版" class="headerlink" title="详细版"></a>详细版</h3><ol><li>在浏览器地址栏输入URL</li><li>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤<ol><li>如果资源未缓存，发起新请求</li><li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li><li>检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：<ul><li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li><li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li></ul></li></ol></li><li>浏览器解析URL获取协议，主机，端口，path</li><li>浏览器组装一个HTTP（GET）请求报文</li><li>浏览器获取主机ip地址，过程如下：<ol><li>浏览器缓存</li><li>本机缓存</li><li>hosts文件</li><li>路由器缓存</li><li>ISP DNS缓存</li><li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li></ol></li><li>打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：<ol><li>客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口</li><li>服务器发回SYN=1， ACK=X+1， Seq=Y的响应包</li><li>客户端发送ACK=Y+1， Seq=Z</li></ol></li><li>TCP链接建立后发送HTTP请求</li><li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</li><li>服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码</li><li>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</li><li>服务器将响应报文通过TCP连接发送回浏览器</li><li>浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：<ol><li>主动方发送Fin=1， Ack=Z， Seq= X报文</li><li>被动方发送ACK=X+1， Seq=Z报文</li><li>被动方发送Fin=1， ACK=X， Seq=Y报文</li><li>主动方发送ACK=Y， Seq=X报文</li></ol></li><li>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</li><li>如果资源可缓存，进行缓存</li><li>对响应进行解码（例如gzip压缩）</li><li>根据资源类型决定如何处理（假设资源为HTML文档）</li><li>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释</li><li>构建DOM树：<ol><li>Tokenizing：根据HTML规范将字符流解析为标记</li><li>Lexing：词法分析将标记转换为对象并定义属性和规则</li><li>DOM construction：根据HTML标记关系将对象组成DOM树</li></ol></li><li>解析过程中遇到图片、样式表、js文件，启动下载</li><li>构建CSSOM树：<ol><li>Tokenizing：字符流转换为标记流</li><li>Node：根据标记创建节点</li><li>CSSOM：节点创建CSSOM树</li></ol></li><li>根据DOM树和CSSOM树构建渲染树:<ol><li>从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none</li><li>对每一个可见节点，找到恰当的CSSOM规则并应用</li><li>发布可视节点的内容和计算样式</li></ol></li><li>js解析如下：<ol><li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading</li><li>HTML解析器遇到没有async和defer的script时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</li><li>当解析器遇到设置了async属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用document.write()，它们可以访问自己script和之前的文档元素</li><li>当文档完成解析，document.readState变成interactive</li><li>所有defer脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用document.write()</li><li>浏览器在Document对象上触发DOMContentLoaded事件</li><li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete，window触发load事件</li></ol></li><li>显示页面（HTML解析过程中会逐步显示页面）</li></ol><h3 id="详细简版"><a href="#详细简版" class="headerlink" title="详细简版"></a>详细简版</h3><ol><li><p>从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</p></li><li><p>开启网络线程到发出一个完整的HTTP请求（这一部分涉及到dns查询，TCP/IP请求，五层因特网协议栈等知识）</p></li><li><p>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</p></li><li><p>后台和前台的HTTP交互（这一部分包括HTTP头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）</p></li><li><p>单独拎出来的缓存问题，HTTP的缓存（这部分包括http缓存头部，ETag，catch-control等）</p></li><li><p>浏览器接收到HTTP数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和DOMContentLoaded等）</p></li><li><p>CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）</p></li><li><p>JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p></li><li><p>其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）</p></li></ol><h2 id="5-如何进行网站性能优化"><a href="#5-如何进行网站性能优化" class="headerlink" title="5 如何进行网站性能优化"></a>5 如何进行网站性能优化</h2><ul><li><p>content方面</p><ul><li>减少HTTP请求：合并文件、CSS精灵、inline Image</li><li>减少DNS查询：DNS缓存、将资源分布到恰当数量的主机名</li><li>减少DOM元素数量</li></ul></li><li><p>Server方面</p><ul><li>使用CDN</li><li>配置ETag</li><li>对组件使用Gzip压缩</li></ul></li><li><p>Cookie方面</p><ul><li>减小cookie大小</li></ul></li><li><p>css方面</p><ul><li>将样式表放到页面顶部</li><li>不使用CSS表达式</li><li>使用<link>不使用@import</li></ul></li><li><p>Javascript方面</p><ul><li>将脚本放到页面底部</li><li>将javascript和css从外部引入</li><li>压缩javascript和css</li><li>删除不需要的脚本</li><li>减少DOM访问</li></ul></li><li><p>图片方面</p><ul><li>优化图片：根据实际颜色需要选择色深、压缩</li><li>优化css精灵</li><li>不要在HTML中拉伸图片</li></ul></li></ul><h3 id="你有用过哪些前端性能优化的方法？"><a href="#你有用过哪些前端性能优化的方法？" class="headerlink" title="你有用过哪些前端性能优化的方法？"></a>你有用过哪些前端性能优化的方法？</h3><ul><li>减少http请求次数：CSS Sprites, - JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</li><li>前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li><li>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</li><li>当需要设置的样式很多时设置className而不是直接操作style</li><li>少用全局变量、缓存DOM节点查找的结果。减少IO读取操作</li><li>避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)</li><li>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳</li><li>避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢</li></ul><h3 id="谈谈性能优化问题"><a href="#谈谈性能优化问题" class="headerlink" title="谈谈性能优化问题"></a>谈谈性能优化问题</h3><ul><li>代码层面：避免使用css表达式，避免使用高级选择器，通配选择器</li><li>缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等</li><li>请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载</li><li>请求带宽：压缩文件，开启GZIP</li></ul><h3 id="前端性能优化最佳实践？"><a href="#前端性能优化最佳实践？" class="headerlink" title="前端性能优化最佳实践？"></a>前端性能优化最佳实践？</h3><ul><li>性能评级工具（PageSpeed 或 YSlow）</li><li>合理设置 HTTP 缓存：Expires 与 Cache-control</li><li><ul><li>静态资源打包，开启 Gzip 压缩（节省响应流量）</li></ul></li><li>CSS3 模拟图像，图标base64（降低请求数）</li><li>模块延迟(defer)加载/异步(async)加载</li><li>Cookie 隔离（节省请求流量）</li><li>localStorage（本地存储）</li><li>使用 CDN 加速（访问最近服务器）</li><li>启用 HTTP/2（多路复用，并行加载）</li><li>前端自动化（gulp/webpack）</li></ul><h2 id="6-HTTP状态码及其含义"><a href="#6-HTTP状态码及其含义" class="headerlink" title="6 HTTP状态码及其含义"></a>6 HTTP状态码及其含义</h2><ul><li>1XX：信息状态码<ul><li>100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li>2XX：成功状态码<ul><li>200 OK 正常返回信息</li><li>201 Created 请求成功并且服务器创建了新的资源</li><li>202 Accepted 服务器已接受请求，但尚未处理</li></ul></li><li>3XX：重定向<ul><li>301 Moved Permanently 请求的网页已永久移动到新位置。</li><li>302 Found 临时性重定向。</li><li>303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。</li><li>304 Not Modified 自从上次请求后，请求的网页未修改过。</li></ul></li><li>4XX：客户端错误<ul><li>400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li>401 Unauthorized 请求未授权。</li><li>403 Forbidden 禁止访问。</li><li>404 Not Found 找不到如何与 URI 相匹配的资源。</li></ul></li><li>5XX: 服务器错误<ul><li>500 Internal Server Error 最常见的服务器端错误。</li><li>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</li></ul></li></ul><h2 id="7-语义化的理解"><a href="#7-语义化的理解" class="headerlink" title="7 语义化的理解"></a>7 语义化的理解</h2><ul><li><p>用正确的标签做正确的事情！</p></li><li><p>HTML语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</p></li><li><p>在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的。</p></li><li><p>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。</p></li><li><p>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解<br>##8 介绍一下你对浏览器内核的理解？</p></li><li><p>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎</p></li><li><p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p></li><li><p>JS引擎则：解析和执行javascript来实现网页的动态效果</p></li><li><p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</p></li></ul><h3 id="常见的浏览器内核有哪些"><a href="#常见的浏览器内核有哪些" class="headerlink" title="常见的浏览器内核有哪些"></a>常见的浏览器内核有哪些</h3><ul><li>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]</li><li>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等</li><li>Presto内核：Opera7及以上。 [Opera内核原为：Presto，现为：Blink;]</li><li>Webkit内核：Safari,Chrome等。 [ Chrome的Blink（WebKit的分支）]</li></ul><h2 id="9-html5有哪些新特性、移除了那些元素？"><a href="#9-html5有哪些新特性、移除了那些元素？" class="headerlink" title="9 html5有哪些新特性、移除了那些元素？"></a>9 html5有哪些新特性、移除了那些元素？</h2><ul><li><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加</p><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>离线应用 manifest</li><li>桌面通知 Notifications</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li><li>地理位置 Geolocation</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>页面可见性改变事件 visibilitychange</li><li>跨窗口通信 PostMessage</li><li>Form Data 对象</li><li>绘画 canvas</li></ul></li><li><p>移除的元素：</p><ul><li>纯表现的元素：basefont、big、center、font、 s、strike、tt、u</li><li>对可用性产生负面影响的元素：frame、frameset、noframes</li></ul></li><li><p>支持HTML5新标签：</p><ul><li>IE8/IE7/IE6支持通过document.createElement方法产生的标签</li><li>可以利用这一特性让这些浏览器支持HTML5新标签</li><li>浏览器支持新标签后，还需要添加标签默认的样式</li><li>当然也可以直接使用成熟的框架、比如html5shim</li></ul></li></ul><h3 id="如何区分-HTML-和-HTML5"><a href="#如何区分-HTML-和-HTML5" class="headerlink" title="如何区分 HTML 和 HTML5"></a>如何区分 HTML 和 HTML5</h3><ul><li>DOCTYPE声明、新增的结构元素、功能元素</li></ul><h2 id="10-HTML5的离线储存怎么使用，工作原理能不能解释一下？"><a href="#10-HTML5的离线储存怎么使用，工作原理能不能解释一下？" class="headerlink" title="10 HTML5的离线储存怎么使用，工作原理能不能解释一下？"></a>10 HTML5的离线储存怎么使用，工作原理能不能解释一下？</h2><ul><li><p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</p></li><li><p>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p></li><li><p>如何使用：</p><ul><li>页面头部像下面一样加入一个manifest的属性；</li><li>在cache.manifest文件的编写离线存储的资源</li><li>在离线状态时，操作window.applicationCache进行需求实现</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#v0.11</span><br><span class="line">CACHE:</span><br><span class="line">js&#x2F;app.js</span><br><span class="line">css&#x2F;style.css</span><br><span class="line">NETWORK:</span><br><span class="line">resourse&#x2F;logo.png</span><br><span class="line">FALLBACK:</span><br><span class="line">&#x2F;offline.html</span><br></pre></td></tr></table></figure></div><h2 id="11-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"><a href="#11-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢" class="headerlink" title="11 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"></a>11 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢</h2><ul><li><p>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p></li><li><p>离线的情况下，浏览器就直接使用离线存储的资源。</p></li></ul><h2 id="12-请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#12-请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="12 请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>12 请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h2><ul><li><p>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</p></li><li><p>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</p></li><li><p>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</p></li><li><p>存储大小：</p><ul><li>cookie数据大小不能超过4k</li><li>sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</li></ul></li><li><p>有期时间：</p><ul><li>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li>sessionStorage 数据在当前浏览器窗口关闭后自动删除</li><li>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li></ul><h2 id="13-iframe有那些缺点？"><a href="#13-iframe有那些缺点？" class="headerlink" title="13 iframe有那些缺点？"></a>13 iframe有那些缺点？</h2><ul><li>iframe会阻塞主页面的Onload事件</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题</li></ul><h2 id="14-WEB标准以及W3C标准是什么"><a href="#14-WEB标准以及W3C标准是什么" class="headerlink" title="14 WEB标准以及W3C标准是什么?"></a>14 WEB标准以及W3C标准是什么?</h2><ul><li>标签闭合、标签小写、不乱嵌套、使用外链css和js、结构行为表现的分离</li></ul><h2 id="15-xhtml和html有什么区别"><a href="#15-xhtml和html有什么区别" class="headerlink" title="15 xhtml和html有什么区别?"></a>15 xhtml和html有什么区别?</h2><ul><li>一个是功能上的差别<ul><li>主要是XHTML可兼容各大浏览器、手机以及PDA，并且浏览器也能快速正确地编译网页</li></ul></li><li>另外是书写习惯的差别<ul><li>XHTML 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、HTML、HTTP、web综合问题&quot;&gt;&lt;a href=&quot;#一、HTML、HTTP、web综合问题&quot; class=&quot;headerlink&quot; title=&quot;一、HTML、HTTP、web综合问题&quot;&gt;&lt;/a&gt;一、HTML、HTTP、web综合问题&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="面试宝典" scheme="http://www.mgblog.cn/categories/%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/"/>
    
    
      <category term="面试" scheme="http://www.mgblog.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="html基础支持" scheme="http://www.mgblog.cn/tags/html%E5%9F%BA%E7%A1%80%E6%94%AF%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>VueCli 外部加载CSS 路径无效找不到文件问题</title>
    <link href="http://www.mgblog.cn/2020/05/26/VueCli-%E5%A4%96%E9%83%A8%E5%8A%A0%E8%BD%BDCSS-%E8%B7%AF%E5%BE%84%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://www.mgblog.cn/2020/05/26/VueCli-%E5%A4%96%E9%83%A8%E5%8A%A0%E8%BD%BDCSS-%E8%B7%AF%E5%BE%84%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-26T01:45:35.000Z</published>
    <updated>2020-05-26T01:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-查看路径是否正确"><a href="#1-查看路径是否正确" class="headerlink" title="1.查看路径是否正确"></a>1.查看路径是否正确</h2><blockquote><p>首先查看是否使用路径别名(@,~),如果使用别名，请查看webpack.base.conf.js文件中的resolve.alias是否设置别名，设置后请重新启动项目。</p></blockquote><blockquote><p>如果使用相对路径请查看相对路径是否正确</p></blockquote><h2 id="2-引用问题"><a href="#2-引用问题" class="headerlink" title="2.引用问题"></a>2.引用问题</h2><blockquote><p>如果使用路径别名，使用@import必须路径印用必须加<del>，如:@import ‘</del>@/assets/css/style.css’。 原因是CSS loader 会把把非根路径的url解释为相对路径， 加~前缀才会解释成模块路径。</p></blockquote><h2 id="3-其他问题"><a href="#3-其他问题" class="headerlink" title="3.其他问题"></a>3.其他问题</h2><blockquote><p>如果路径无错，相对路径可以引入，使用别名无法找到文件，请将项目根目录下的.postcssrc.js中的plugins对象postcss-import属性注释</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-查看路径是否正确&quot;&gt;&lt;a href=&quot;#1-查看路径是否正确&quot; class=&quot;headerlink&quot; title=&quot;1.查看路径是否正确&quot;&gt;&lt;/a&gt;1.查看路径是否正确&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先查看是否使用路径别名(@,~),如果使用别名，
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://www.mgblog.cn/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://www.mgblog.cn/tags/Vue/"/>
    
      <category term="后台管理系统" scheme="http://www.mgblog.cn/tags/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="权限管理" scheme="http://www.mgblog.cn/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
      <category term="Vue-Cli" scheme="http://www.mgblog.cn/tags/Vue-Cli/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.mgblog.cn/2020/03/15/hello-world/"/>
    <id>http://www.mgblog.cn/2020/03/15/hello-world/</id>
    <published>2020-03-15T05:36:48.200Z</published>
    <updated>2020-01-30T12:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript跨域方式</title>
    <link href="http://www.mgblog.cn/2020/02/08/JavaScript%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.mgblog.cn/2020/02/08/JavaScript%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F/</id>
    <published>2020-02-08T08:01:16.000Z</published>
    <updated>2020-02-08T11:21:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在前后端分离和SPA单页面应用盛行的今天，前后端数据交互经常会碰到请求跨域的问题，我这里就不赘述跨域的原理了，单刀直入，解决跨域三种普遍方式。</p></blockquote><h1 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h1><blockquote><p>Jsonp利用了<code>script</code>标签无跨域资源的限制条件，网页得到从其他来源动态产生的JSON数据。JSONP 请求需要前后端协调<code>callback</code>关键字才可以</p></blockquote><p>如果你看不到你上面的tips,没关系，大致的意思是创建一个script从而拿到服务器接口的返回值，但是你会发现好像只有JQ的请求库<code>$.ajax</code>才支持jsonp~~<br>其实JQ请求库也是自己封装一个这样的创建script标签的方法来完成这样的实现，下面列举两个方法实现jsonp</p><h2 id="JQ"><a href="#JQ" class="headerlink" title="JQ"></a>JQ</h2><blockquote><p>JQ实现方法比较简单，因为他本身封装号了jsonp的实现，直接上代码</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: url, <span class="comment">//这里参数填写请求接口url</span></span><br><span class="line">    method: <span class="string">'POST'</span>, <span class="comment">// 就算是是写POST 实际jsonp只能是GET方式请求</span></span><br><span class="line">    data: data,  <span class="comment">// 请求参数</span></span><br><span class="line">    dataType: <span class="string">'jsonp'</span>, <span class="comment">// 请求方式，务必是jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">'callback'</span>, <span class="comment">// 与后端协定的关键字</span></span><br><span class="line">    success (rel) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(rel) <span class="comment">// 接口成功返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="jsonp封装"><a href="#jsonp封装" class="headerlink" title="jsonp封装"></a>jsonp封装</h2><blockquote><p>你会发现原生<code>XMLHttpRequest</code>和知名请求库<code>axios</code>并不支持jsonp的请求方式(因为他们完全是两种不一样的东西)，这时候可以自己封装个方法~</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">jsonp (obj) &#123;</span><br><span class="line">    <span class="comment">// 定义一个处理Jsonp返回数据的回调函数</span></span><br><span class="line">    <span class="built_in">window</span>[<span class="string">'callback'</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">object</span>) </span>&#123;</span><br><span class="line">    obj.success(object)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="comment">// 组合请求URL</span></span><br><span class="line">    script.src = obj.url + <span class="string">'?callback=callback'</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj.data) &#123;</span><br><span class="line">    script.src += <span class="string">'&amp;'</span> + key + <span class="string">'='</span> + obj.data[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将创建的新节点添加到BOM树上</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(script)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><p>使用时候可以直接调用jsonp,然后传入对象，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.jsonp(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    data: data,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="后端协调"><a href="#后端协调" class="headerlink" title="后端协调"></a>后端协调</h2><blockquote><p>这时候你开心的完成上面的步骤后发现，事情没有那么简单~<br><a href="http://img.mgblog.cn/662b8f2be5757adfa874e8269d99ebad.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="http://img.mgblog.cn/662b8f2be5757adfa874e8269d99ebad.png" class="lazyload" title="image"></a><br>报错了，还记得我之前说的吗？jsonp需要前后端协调<code>callback</code>关键字才可以,这时候你就要请后端大佬喝一杯冰阔落，让他加上关键字返回，JQ默认关键字是<code>callback</code>,自己封装的可以自行调整哦~</p></blockquote><p>下面列出PHP后端调整代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-type:application/json;charset=utf-8"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span><span class="params">($data=array<span class="params">(<span class="string">'message'</span>=&gt;<span class="string">''</span>)</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 返回成功json使用</span></span><br><span class="line">    $callback = <span class="keyword">isset</span>($_GET[<span class="string">'callback'</span>]) ? trim($_GET[<span class="string">'callback'</span>]) : <span class="string">''</span>; <span class="comment">// 接收前端jsonp回调参数</span></span><br><span class="line">    $arrayName = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'type'</span> =&gt; <span class="string">'success'</span>,</span><br><span class="line">        <span class="string">'body'</span>=&gt;$data</span><br><span class="line">    );</span><br><span class="line">    $tmp= stripslashes(json_encode($arrayName,JSON_UNESCAPED_UNICODE));</span><br><span class="line">    <span class="keyword">echo</span> $callback . <span class="string">'('</span> . $tmp .<span class="string">')'</span>;  <span class="comment">//返回格式需要callback关键字在最前面</span></span><br><span class="line">&#125;</span><br><span class="line">success(<span class="keyword">array</span>(<span class="string">'message'</span>=&gt;<span class="string">'this is jsonp'</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>实际前端在开发者工具中的<code>Network</code>中查看请求是这样的<br><a href="http://img.mgblog.cn/d5d30735b0e63836e1f350cc938360e1.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="http://img.mgblog.cn/d5d30735b0e63836e1f350cc938360e1.png" class="lazyload" title="image"></a><br>但是直接获取到的返回，是对象哦<del>~</del><br><a href="http://img.mgblog.cn/c2dd56831da4fec08e587b1b6202d976.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="http://img.mgblog.cn/c2dd56831da4fec08e587b1b6202d976.png" class="lazyload" title="image"></a></p><h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><blockquote><p>Proxy实际上就是利用服务器，进行接口的代理转发请求，他不需要后端人员配合，只需要配置服务器开启代理转发的相应参数即可。在vue-cli中我们可以使用node.js服务器的便利，设置<code>proxyTable</code>相应参数，轻松达到接口转发功能。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://www.api.com'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">            <span class="string">'^/api'</span>: <span class="string">'/'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用时，我们可以直接<code>/api/***.php</code>即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">'/api/api.php'</span> <span class="comment">// 实际上等于请求http://www.api.com/api.php</span></span><br><span class="line"><span class="keyword">let</span> data= &#123;&#125;</span><br><span class="line"><span class="keyword">this</span>.$http.post(url, data).then(<span class="function"><span class="params">rel</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(rel)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="运维协调"><a href="#运维协调" class="headerlink" title="运维协调"></a>运维协调</h2><blockquote><p>在不管是在vue-cli中还是还是普通开发环境下，接口的代理转发都是依赖服务器来进行，所以当项目打包上线后项目将脱离node的环境，没有node的服务到一个新的服务器中运行，这时候如果不在新服务环境中配置代理转发，接口将会是404。</p></blockquote><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><blockquote><p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p></blockquote><p>简单的来说就算让后端的接口中添加几个请求头，允许前端跨域访问。如以下PHP添加的请求头：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Allow-Origin: *'</span>); <span class="comment">// *代表允许任何网址请求,也可以直接设置域名，如：</span></span><br><span class="line"><span class="comment">// header('Access-Control-Allow-Origin: http://www.el.com');</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE'</span>); <span class="comment">// 允许请求的类型</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Credentials: true'</span>); <span class="comment">// 设置是否允许发送 cookies</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers: Content-Type,Content-Length,Accept-Encoding,X-Requested-with, Origin'</span>); <span class="comment">// 设置允许自定义请求头的字段</span></span><br></pre></td></tr></table></figure></div><p>这种方式虽然有点不安全，但是方便、简洁、有效的解决的跨域带来的困扰</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在前后端分离和SPA单页面应用盛行的今天，前后端数据交互经常会碰到请求跨域的问题，我这里就不赘述跨域的原理了，单刀
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://www.mgblog.cn/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://www.mgblog.cn/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://www.mgblog.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue后台管理之登陆权限列表以及按钮权限</title>
    <link href="http://www.mgblog.cn/2020/02/05/Vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E4%B9%8B%E7%99%BB%E9%99%86%E6%9D%83%E9%99%90%E4%BB%A5%E5%8F%8A%E6%8C%89%E9%92%AE%E6%9D%83%E9%99%90/"/>
    <id>http://www.mgblog.cn/2020/02/05/Vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E4%B9%8B%E7%99%BB%E9%99%86%E6%9D%83%E9%99%90%E4%BB%A5%E5%8F%8A%E6%8C%89%E9%92%AE%E6%9D%83%E9%99%90/</id>
    <published>2020-02-05T06:21:51.000Z</published>
    <updated>2020-02-29T10:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><blockquote><p>请先预览一篇关于<a href="https://blog.csdn.net/weixin_34327223/article/details/93688990" target="_blank" rel="noopener">手摸手，带你用vue撸后台 系列二(登录权限篇)</a>，如果这篇你能看的懂，就不用往下看了<br>此篇文章是基于vue-element-admin简化过来的，所以可以先查看<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js" target="_blank" rel="noopener">vue-element-admin源码地址</a>。</p></blockquote><hr><h2 id="登陆权限列表"><a href="#登陆权限列表" class="headerlink" title="登陆权限列表"></a>登陆权限列表</h2><h3 id="初始化路由细信息"><a href="#初始化路由细信息" class="headerlink" title="初始化路由细信息"></a>初始化路由细信息</h3><blockquote><p>首先要准备两个数组，一个数组拥有全部路由的的信息，一个数组是初始化的路由数组，里面只有404页面，登录页面，还有一些不用权限的页面，我这里将他们封装在一个js,然后用export暴露出去，到时候在router.js中引入。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;假设ROETER 是所有路由信息的数组</span><br><span class="line">export const ROETER &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Goods&#39;,</span><br><span class="line">    name: &#39;Goods&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;Goods&#x2F;goodsList&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goods&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;商品&#39;,</span><br><span class="line">      icon: &#39;el-icon-goods&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsList&#39;,</span><br><span class="line">        name: &#39;goodsList&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsList.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;商品列表&#39;,</span><br><span class="line">          icon: &#39;el-icon-tickets&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: &#39;&#x2F;Goods&#x2F;goodsList&#x2F;select&#x2F;:type&#39;,</span><br><span class="line">            name: &#39;goodsList_item&#39;,</span><br><span class="line">            component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;List_item.vue&#39;),</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: &#39;商品详情&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            path: &#39;&#x2F;Goods&#x2F;goodsList&#x2F;install&#x2F;:type&#39;,</span><br><span class="line">            name: &#39;goodsList_item_install&#39;,</span><br><span class="line">            component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;List_item_install.vue&#39;),</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: &#39;商品设置&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                path: &#39;&#x2F;Goods&#x2F;goodsList&#x2F;install&#x2F;:type&#x2F;types&#39;,</span><br><span class="line">                name: &#39;goodsList_item_install_types&#39;,</span><br><span class="line">                component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;list_item_type.vue&#39;),</span><br><span class="line">                meta: &#123;</span><br><span class="line">                  title: &#39;商品规格&#39;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsAdd&#39;,</span><br><span class="line">        name: &#39;goodsAdd&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsAdd.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;添加商品&#39;,</span><br><span class="line">          icon: &#39;el-icon-sold-out&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsItem&#39;,</span><br><span class="line">        name: &#39;goodsItem&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsItem.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;商品类型&#39;,</span><br><span class="line">          icon: &#39;el-icon-more&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Goods&#x2F;goodsBrand&#39;,</span><br><span class="line">        name: &#39;goodsBrand&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;goods&#x2F;goodsBrand.vue&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;品牌列表&#39;,</span><br><span class="line">          icon: &#39;el-icon-news&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Order&#39;,</span><br><span class="line">    name: &#39;Order&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;Order&#x2F;Orderlist&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;index&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;订单管理&#39;,</span><br><span class="line">      icon: &#39;el-icon-document&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Order&#x2F;Orderlist&#39;,</span><br><span class="line">        name: &#39;Orderlist&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;Orderlist&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;订单列表&#39;,</span><br><span class="line">          icon: &#39;el-icon-tickets&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: &#39;&#x2F;Order&#x2F;Orderlist&#x2F;:id&#39;,</span><br><span class="line">            name: &#39;Order_item&#39;,</span><br><span class="line">            component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;Order_item.vue&#39;),</span><br><span class="line">            meta: &#123;</span><br><span class="line">              title: &#39;订单设置&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Order&#x2F;OrderReturn&#39;,</span><br><span class="line">        name: &#39;OrderReturn&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;OrderReturn&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;退货处理&#39;,</span><br><span class="line">          icon: &#39;el-icon-sort&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;Order&#x2F;Return&#39;,</span><br><span class="line">        name: &#39;Return&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Order&#x2F;Return&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;退货原因处理&#39;,</span><br><span class="line">          icon: &#39;el-icon-rank&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Useer&#39;,</span><br><span class="line">    name: &#39;Useer&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;user&#x2F;index&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;用户管理&#39;,</span><br><span class="line">      icon: &#39;el-icon-view&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;Adminis&#39;,</span><br><span class="line">    name: &#39;Adminis&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Adminis&#x2F;index&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;后台管理&#39;,</span><br><span class="line">      icon: &#39;el-icon-setting&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; fistroutes是还未登录时候，初始的router数组</span><br><span class="line">export const fistroutes &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;index&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;index&#39;),</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#x2F;index&#39;,</span><br><span class="line">        name: &#39;first&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;first&#39;),</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: &#39;统计页&#39;,</span><br><span class="line">          icon: &#39;el-icon-menu&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;首页&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;login&#39;,</span><br><span class="line">    name: &#39;login&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;login&#39;),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &#39;登陆&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;&#x2F;&#x2F; 404</span><br><span class="line">    path: &#39;&#x2F;404&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;ErrPage&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; &#x2F;&#x2F; 重定向到404</span><br><span class="line">    path: &#39;*&#39;,</span><br><span class="line">    redirect: &#39;&#x2F;404&#39;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><h3 id="初始化router-js"><a href="#初始化router-js" class="headerlink" title="初始化router.js"></a>初始化router.js</h3><p>确定好这两个数组后，我们就要去初始化router.js了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">&#x2F;&#x2F;先引入两个数组</span><br><span class="line">import &#123;ROETER, fistroutes&#125; from &#39;@&#x2F;assets&#x2F;js&#x2F;router_mun.js&#39;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将初始化的数组fistroutes赋值给routes，</span><br><span class="line">var router &#x3D; new Router(&#123;</span><br><span class="line">  routes: fistroutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;路由拦截</span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F;  如果是其他需要路由页面则进行权限判断</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure></div><p>初始化router.js，首先我们做个全局路由拦截，每次跳转判断是不是在登录页面，如果是登录页面无条件放行~<br>然后将router.js 在main.js中引入<del>~</del></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">&#x2F;&#x2F; 引入router.js</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="登录获取获取token以及权限列表"><a href="#登录获取获取token以及权限列表" class="headerlink" title="登录获取获取token以及权限列表"></a>登录获取获取token以及权限列表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> this.login().then((data) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 获取token</span><br><span class="line">    setToken(&#39;utoken&#39;, data.token)</span><br><span class="line">    setToken(&#39;uID&#39;, data.uid)</span><br><span class="line">    this.tipsShow(&#39;登陆成功&#39;).then(data &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 返回操作权限列表</span><br><span class="line">        &#x2F;&#x2F; 假设后端返回的权限列表为这样的数组（按道理来说一般参数比较多）</span><br><span class="line">        let APItest &#x3D; [</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#39;Goods&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#39;Order&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">        &#x2F;&#x2F; 将权限列表存储在session中，方便拿出来</span><br><span class="line">        sessionStorage.setItem(&#39;list&#39;, JSON.stringify(APItest))</span><br><span class="line">        &#x2F;&#x2F; 然后跳转到index页面</span><br><span class="line">        this.$router.push(&#123;path: &#39;&#x2F;index&#39;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ol><li><p>这里可以看到我存储token是使用setToken()一个方法，这个方法是我封装好的方法，后期会存储进入cookie，使用cookie存储可以方便API请求时候进行携带cookie进行请求（你问跨域怎么携带cookie请求？后续我会开篇文章讲跨域）</p></li><li><p>而存储权限列表是使用session，因为我需求是当浏览器重新打开需要重新登录，所以使用了session当然你也可以使用localStorage进行存储权限列表。</p></li><li><p>因为是数组所以存储之前JSON.stringify转换成json字符串进行存储，并且命名为list,方便之后拿出来~</p></li></ol><h3 id="路由权限对比生成"><a href="#路由权限对比生成" class="headerlink" title="路由权限对比生成"></a>路由权限对比生成</h3><blockquote><p>登录后获取到后端返回token与权限路由list后，返回router.js进行对比添加路由数组,因为登录后跳转到index页面。这里会出发路由拦截。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 还记得刚才在router.js 的路由拦截吗</span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; </span><br><span class="line">        &#x2F;&#x2F; 检查用户是否有token,是否登录</span><br><span class="line">    &#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">      next(&#39;&#x2F;login&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ol><li>首先检查以下是否有cookie中token值（这里getToken()方法是我封装获取token值用~）</li><li>如果没有token值说明没有登录<del>~</del>返回登录页面。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; </span><br><span class="line">    &#x2F;&#x2F; 检查用户是否有token,是否登录</span><br><span class="line">    if (from.name &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 路由来自：如果强制刷新则未空</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        sessionStorage.setItem(&#39;new&#39;, to.path)</span><br><span class="line">    &#125;</span><br><span class="line">    data ? next() : next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">    next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ol><li>注意这里判断了以下上了页面的name,是为了防止用户强制F5刷新页面，导致路由信息消失</li><li>如果form.name===null,代表用户刷新页面，需要重新生成路由信息，否在登录的时候生成一次就行，</li><li>如果上个页面路由信息不为空，将存储现在的页面信息，防止用户刷新后路由重新生成后跳转到不存的路由</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; </span><br><span class="line">    if (from.name &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 路由来自：如果强制刷新则未空</span><br><span class="line">        &#x2F;&#x2F; 登陆后获取权限路由存储到的list；</span><br><span class="line">        let returnRouter &#x3D; JSON.parse(sessionStorage.getItem(&#39;list&#39;))</span><br><span class="line">        &#x2F;&#x2F; 获取到当前的路由列表</span><br><span class="line">        let routes &#x3D; router.options.routes</span><br><span class="line">        &#x2F;&#x2F; 生成动态路由</span><br><span class="line">        if (returnRouter &amp;&amp; routes[0].children.length &lt;&#x3D; 1) &#123;</span><br><span class="line">            ROETER.forEach((i, v) &#x3D;&gt; &#123;</span><br><span class="line">                returnRouter.forEach((item, index) &#x3D;&gt; &#123;</span><br><span class="line">                    if (i.name &#x3D;&#x3D;&#x3D; item.name) &#123;</span><br><span class="line">                        &#x2F;&#x2F; push()加入现有的权限列表中</span><br><span class="line">                        routes[0].children.push(i)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            router.addRoutes(router.options.routes)</span><br><span class="line">            let pathName &#x3D; sessionStorage.getItem(&#39;new&#39;)</span><br><span class="line">            next(pathName)</span><br><span class="line">        &#125; else if (!returnRouter) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取不到权限路由返回</span><br><span class="line">            next(&#39;&#x2F;login&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    sessionStorage.setItem(&#39;new&#39;, to.path)</span><br><span class="line">    &#125;</span><br><span class="line">    data ? next() : next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">    next(&#39;&#x2F;login&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><blockquote><p>这里就是重头戏了，获取权限列表，生成权限列表，其实功能就是：获取登录后list权限列表然后将他与全部路由信息ROETER比较。然后push加入现有的权限列表中</p></blockquote><ol><li>这里注意<code>routes[0].children.push(i)</code> 加如权限列表后还不会显示的，需要执行一个API<code>router.addRoutes(router.options.routes)</code>，这样returnRouter就是初始列表+已有的权限列表了</li><li>生成权限列表后 在重新next,就OK了~~</li></ol><p>下面贴完整的router.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Router from &#39;vue-router&#39;</span><br><span class="line">import &#123;getToken, delCookie&#125; from &#39;@&#x2F;assets&#x2F;js&#x2F;config.js&#39;</span><br><span class="line">import &#123;ROETER, fistroutes&#125; from &#39;@&#x2F;assets&#x2F;js&#x2F;router_mun.js&#39;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">var router &#x3D; new Router(&#123;</span><br><span class="line">  routes: fistroutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    getToken(&#39;utoken&#39;).then((data) &#x3D;&gt; &#123; &#x2F;&#x2F; 检查用户是否有token,是否登录</span><br><span class="line">      if (from.name &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 路由来自：如果强制刷新则未空</span><br><span class="line">        &#x2F;&#x2F; 登陆后获取权限路由存储到的list；</span><br><span class="line">        let returnRouter &#x3D; JSON.parse(sessionStorage.getItem(&#39;list&#39;))</span><br><span class="line">        let routes &#x3D; router.options.routes</span><br><span class="line">        &#x2F;&#x2F; 生成动态路由</span><br><span class="line">        if (returnRouter &amp;&amp; routes[0].children.length &lt;&#x3D; 1) &#123;</span><br><span class="line">          ROETER.forEach((i, v) &#x3D;&gt; &#123;</span><br><span class="line">            returnRouter.forEach((item, index) &#x3D;&gt; &#123;</span><br><span class="line">              if (i.name &#x3D;&#x3D;&#x3D; item.name) &#123;</span><br><span class="line">                routes[0].children.push(i)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          router.addRoutes(router.options.routes)</span><br><span class="line">          let pathName &#x3D; sessionStorage.getItem(&#39;new&#39;)</span><br><span class="line">          next(pathName)</span><br><span class="line">        &#125; else if (!returnRouter) &#123;</span><br><span class="line">          &#x2F;&#x2F; 获取不到权限路由返回</span><br><span class="line">          next(&#39;&#x2F;login&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        sessionStorage.setItem(&#39;new&#39;, to.path)</span><br><span class="line">      &#125;</span><br><span class="line">      data ? next() : next(&#39;&#x2F;login&#39;)</span><br><span class="line">      &#x2F;&#x2F; 记录每次跳转的路由，刷新不掉队</span><br><span class="line">    &#125;).catch(erro &#x3D;&gt; &#123;</span><br><span class="line">      next(&#39;&#x2F;login&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>tips:</strong><br>1.以下这个是针对大类进行添加，如果还要筛选小类的遍历，还有多遍历一层数组，当然你也可以封装一个方法，递归遍历。<br>2.刷新页面或者重复登录，可能会造成路由重复添加的警告出现，只是警告并没有错误，刷新页面可以重置路由，但是体验不太好，所以我没用。<br>3.可能大家的后端返回和我不一样，不过基本上都是比对后端返回的name进行添加，请结合后端返回实际情况使用。</p></blockquote><h2 id="权限按钮"><a href="#权限按钮" class="headerlink" title="权限按钮"></a>权限按钮</h2><blockquote><p>一般来说针对到按钮都是后端对接口进行权限认证，前端没有必要细化到每个按钮做权限，但是要做还是可以做的，这里我用到Vue自定义指令进行做每个按钮的权限认证。</p></blockquote><p>首先我们先<code>mock</code>一些数据进行测试</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">    假设这是登录成功时候，后端返回json数据，获取到的可以点击的按钮列表，我们将他们存储到sessionStorage或者localStorage中 </span><br><span class="line">**&#x2F;</span><br><span class="line">let list&#x3D; [&#39;admin&#39;,&#39;add&#39;,&#39;delete&#39;];</span><br><span class="line">sessionStorage.setItem(&#39;permission_button&#39;, JSON.stringify(list))</span><br></pre></td></tr></table></figure></div><p>然后在main.js中增加全局自定义指令进行设置~~</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;btnlimit&#39;, &#123;</span><br><span class="line">    inserted: function (el,binding) &#123;</span><br><span class="line">        let permissionList &#x3D; sessionStorage.getItem(&#39;permission_button&#39;);</span><br><span class="line">        if (!permissionList.includes(binding.value)) &#123;</span><br><span class="line">            el.parentNode.removeChild(el)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>当我们需要确定某个按钮需要什么权限时候可以使用v-btnlimit=’所需权限字符串’。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-btnlimit&#x3D;&#39;&quot;admin&quot;&#39; type&#x3D;&quot;button&quot; name&#x3D;&quot;admin&quot; value&#x3D;&quot;admin按钮&quot;  id&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">&lt;input v-btnlimit&#x3D;&#39;&quot;updata&quot;&#39; type&#x3D;&quot;button&quot; name&#x3D;&quot;updata&quot; value&#x3D;&quot;updata按钮&quot;  id&#x3D;&quot;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></div><p>上面的只会显示admin按钮，因为存储在session数组中他没有updata权限，这样就是一个简单的按钮权限设置了~~</p><blockquote><p><strong>tips:</strong><br>1.通过自定义指令实现绑定权限的按钮方便，而且可以动态配置，可以联合后端增加更多的权限字段。<br>2.虽然可以配置很多权限字段，但是还是需要手动为代码配置上相应的权限字段，所以还是有所不便~</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知识准备&quot;&gt;&lt;a href=&quot;#知识准备&quot; class=&quot;headerlink&quot; title=&quot;知识准备&quot;&gt;&lt;/a&gt;知识准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;请先预览一篇关于&lt;a href=&quot;https://blog.csdn.net/weixin_343
      
    
    </summary>
    
    
      <category term="Web前端" scheme="http://www.mgblog.cn/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://www.mgblog.cn/tags/Vue/"/>
    
      <category term="后台管理系统" scheme="http://www.mgblog.cn/tags/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="权限管理" scheme="http://www.mgblog.cn/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
      <category term="Vue-Router" scheme="http://www.mgblog.cn/tags/Vue-Router/"/>
    
  </entry>
  
  <entry>
    <title>hexo从零开始搭建博客</title>
    <link href="http://www.mgblog.cn/2020/02/04/hexo%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.mgblog.cn/2020/02/04/hexo%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-02-04T06:01:32.000Z</published>
    <updated>2020-02-04T10:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h2><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>因为需要npm进行安装和node.js进行编译运行环境，请进入下列网址根据自身系统进行下载并安装node.js。(安装一直下一步即可)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;download&#x2F;</span><br></pre></td></tr></table></figure></div><p>下载完成后，请打开各系统自带的终端</p><blockquote><p>window: win+R 输入’cmd’</p></blockquote><blockquote><p>masOS: Command+空格 搜索输入 终端</p></blockquote><p>打开终端后输入 <code>node -v</code>或<code>npm -v</code>,输出node.js版本号/npm版本号，确认node.js安装成功。</p><h4 id="node-js安装错误"><a href="#node-js安装错误" class="headerlink" title="node.js安装错误"></a>node.js安装错误</h4><ul><li>1.npm（node）不是内部或外部命令<br>  是因为node.js安装完毕后没有加入windows全局变量所致，百度查询：nodejs环境变量配置，配置完成后重启生效</li></ul><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>因为后期需要将生成的博客上传到github/码云/gitlab进行浏览，请进入下列网址根据自身系统进行下载并安装git。(安装一直下一步即可)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;git-scm.com&#x2F;</span><br></pre></td></tr></table></figure></div><p>打开终端后输入 git –version,输出git版本号，确认git安装成功。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">&#x2F;&#x2F;输出版本号</span><br><span class="line">git version 2.23.0.windows.1</span><br></pre></td></tr></table></figure></div><p>然后配置全局git，告诉git你的名字和Email地址(<code>需要先注册github账号确认好自己的用户名和邮箱</code>)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的账户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></div><p>配置成功后可以查看刚才配置的信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看账户名</span><br><span class="line">git config user.name</span><br><span class="line">&#x2F;&#x2F; 查看邮箱</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></div><h4 id="git-js安装错误"><a href="#git-js安装错误" class="headerlink" title="git.js安装错误"></a>git.js安装错误</h4><ul><li>1.git不是内部或外部命令<br>  是因为git安装完毕后没有加入windows全局变量所致，百度查询：git环境变量配置，配置完成后重启生效</li></ul><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><p>cnpm是淘宝团队做的国内镜像，因为npm的服务器位于国外可能会影响安装。淘宝镜像与官方同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br>在终端中输入以下命令安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div><p>安装完成后，查看cnpm版本，确认安装成功</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure></div><hr><h2 id="安装hexo与初始化"><a href="#安装hexo与初始化" class="headerlink" title="安装hexo与初始化"></a>安装hexo与初始化</h2><h3 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h3><p>打开终端，输入：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></div><p>安装完成后，查看hexo版本号</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br><span class="line">&#x2F;&#x2F; 输出以下hexo依赖环境，证明hexo全局安装成功</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Windows_NT 10.0.18362 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.16.3</span><br><span class="line">v8: 6.8.275.32-node.54</span><br><span class="line">uv: 1.28.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 4</span><br><span class="line">openssl: 1.1.1c</span><br><span class="line">icu: 64.2</span><br><span class="line">unicode: 12.1</span><br><span class="line">cldr: 35.1</span><br><span class="line">tz: 2019a</span><br></pre></td></tr></table></figure></div><h3 id="初始化创建博客"><a href="#初始化创建博客" class="headerlink" title="初始化创建博客"></a>初始化创建博客</h3><blockquote><p>注意当前想要创建博客的目录，可以windows可以在终端查看当前所在目录，masOS使用<code>pwd</code>命令进行查看。q<br>想要切换目录，windows可以直接使用 盘符 + cd 命令如，masOS 直接使用cd命令进行切换目录</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:</span><br><span class="line">&#x2F;&#x2F; 切换目录到D盘</span><br><span class="line">cd .&#x2F;blog</span><br><span class="line">&#x2F;&#x2F; 切换目录到当前盘符下的blog文件夹下</span><br></pre></td></tr></table></figure></div><p>首先创建个目录，将承载blog生成的文件，这里就叫blog文件夹了，然后使用上面的命令切换至blog文件夹中，准备开始初始化博客工作。</p><h4 id="hexo-init命令"><a href="#hexo-init命令" class="headerlink" title="hexo init命令"></a>hexo init命令</h4><blockquote><p>hexo init命令用于初始化一个博客，生成一个博客所需的所有默认文件,<code>masOS可以使用:sudo hexo init命令进行初始化，sudo代表管理员模式</code></p></blockquote><p>初始化完成后，hexo将会提示<code>INFO Start blogging with Hexo</code>，代表初始化成功。他会在你指定的文件夹下生成hexo博客必须的文件。</p><blockquote><p>.gitignore:  git上传配置文件<br>_config.yml:  hexo博客配置文件(所有配置都基于此处)<br>package-lock.json/package.json:  hexo依赖库配置文件<br>scaffolds:  hexo初始生成的页面文件夹(通常不动)<br>source:  hexo资源文件，和子页面承载文件夹<br>themes:  模板文件夹(初始化的时候会生成landscape模板。后期可以自由更换博客模板)</p></blockquote><h4 id="hexo-s-hexo-server"><a href="#hexo-s-hexo-server" class="headerlink" title="hexo s/hexo server"></a>hexo s/hexo server</h4><blockquote><p>hexo s或者hexo server 启动服务器，运行博客。</p></blockquote><p>初始化完成后，可以开始使用<code>hexo s</code>启动博客看下初始博客样式啦~<br><a href="http://img.mgblog.cn/2a523699945f982861016e8dd111c4f9.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="http://img.mgblog.cn/2a523699945f982861016e8dd111c4f9.png" class="lazyload" title="image"></a></p><h5 id="hexo-s启动可能遇到的错误"><a href="#hexo-s启动可能遇到的错误" class="headerlink" title="hexo s启动可能遇到的错误"></a>hexo s启动可能遇到的错误</h5><ul><li>1.ERROR Try running: ‘npm install hexo –save’<br>博客目录中没有存在node_modules存放依赖库的文件夹，可以使用<code>npm install</code>命令生成node_modules</li><li>2.Usage: hexo &lt;command&gt;<br>Hexo 3.0 把服务器独立成了个别模块，如果想使用hexo s您必须先安装 hexo-server 才能使用。<br>使用<code>npm install hexo-server --save</code>进行安装</li></ul><h4 id="hexo-new-lt-title-gt"><a href="#hexo-new-lt-title-gt" class="headerlink" title="hexo new &lt;title&gt;"></a>hexo new &lt;title&gt;</h4><blockquote><p>hexo new &lt;title&gt;新建一篇文章。如果标题包含空格的话，请使用引号括起来。</p></blockquote><p>初始化完成后可以使用 hexo new ‘title’来新建一篇文章</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#39;title&#39;</span><br><span class="line">INFO  Created: D:\博客\blog\source\_posts\title.md</span><br></pre></td></tr></table></figure></div><p>建立后会提示博客建立的地址，基本在会在博客目录下的source/_posts目录下，然后使用md文件编辑语法进行编辑文章。</p><h4 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h4><blockquote><p>hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p></blockquote><p>在新建文章和编辑文章保存后，要进行缓存清除，保证文章始终更新</p><h4 id="hexo-generate-hexo-g"><a href="#hexo-generate-hexo-g" class="headerlink" title="hexo generate/hexo g"></a>hexo generate/hexo g</h4><blockquote><p>hexo generate 重新生成静态文件。该命令可以简写为hexo g</p></blockquote><p>博客缓存清除后，要再次生成静态文件。然后在重新启动服务<code>hexo s</code></p><hr><h2 id="部署远端gitHub"><a href="#部署远端gitHub" class="headerlink" title="部署远端gitHub"></a>部署远端gitHub</h2><blockquote><p>1.需要拥有github账号<br>2.配置好git config –global user.name “你的账户名”与git config –global user.email “你的邮箱”</p></blockquote><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>登录上github后，点击new repository，创建新仓库，仓库名必须为<code>用户名.github.io</code>,仓库名前缀必须为用户名不能是其他，否则github page访问不了。<br><a href="http://img.mgblog.cn/e7c656a5b89fc3e51b924d9fb769e5f8.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="http://img.mgblog.cn/e7c656a5b89fc3e51b924d9fb769e5f8.png" class="lazyload" title="image"></a><br>仓库说明（Description）可以随便填~</p><h3 id="安装部署器hexo-deployer-git"><a href="#安装部署器hexo-deployer-git" class="headerlink" title="安装部署器hexo-deployer-git"></a>安装部署器hexo-deployer-git</h3><blockquote><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。hexo deploy（可简写成hexo d）,但是必须要安装部署器hexo-deployer-git。</p></blockquote><p>在博客的目录中使用以下命令进行安装：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div><p>安装完成后需要修改博客目录中的_config.yml文件中的一些配置信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git  &#x2F;&#x2F;默认填写git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;usermane&#x2F;usermane.github.io.git  &#x2F;&#x2F; 远程仓库地址</span><br><span class="line">  branch: master &#x2F;&#x2F;提交到所在分支，默认提交到master分支就好</span><br></pre></td></tr></table></figure></div><p>注意冒号后面要有空格！！！！</p><p>repo参数需要点击进刚才创建的github仓库中获取，如图所示：<br><a href="http://img.mgblog.cn/12f8743fdb048ec51d455eaa0c20251d.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="http://img.mgblog.cn/12f8743fdb048ec51d455eaa0c20251d.png" class="lazyload" title="image"></a></p><p>将参数填写完成后，准备开始部署远端。</p><h3 id="hexo-d-部署远端命令"><a href="#hexo-d-部署远端命令" class="headerlink" title="hexo d 部署远端命令"></a>hexo d 部署远端命令</h3><blockquote><p>使用hexo d 自动打包部署到远端，如果你是第一次部署，可能会提示叫你输入github账户密码，输入后就github仓库内就有内容了~</p></blockquote><p><a href="http://img.mgblog.cn/9b63803dc79dc0070f39a07f77160668.png" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="http://img.mgblog.cn/9b63803dc79dc0070f39a07f77160668.png" class="lazyload" title="image"></a></p><blockquote><p>注意输出密码的时候他不会显示占位符合，如果出现输入没占位符，继续按正常输出即可。</p></blockquote><h3 id="使用用户名-github-io访问博客内容"><a href="#使用用户名-github-io访问博客内容" class="headerlink" title="使用用户名.github.io访问博客内容"></a>使用<code>用户名.github.io</code>访问博客内容</h3><blockquote><p>直接使用<code>用户名.github.io</code>进行访问，这样别人也能访问到你的博客内容了~~</p></blockquote><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><blockquote><p> <strong>Q:我上传完github后为什么页面显示404.</strong><br> A:页面上传后需要一定等待时间响应,如果10分钟后还访问404，请重复hexo clean和hexo g -d，清除博客缓存与重新生成并上传</p></blockquote><blockquote><p> <strong>Q:hexo server启动服务，在浏览器访问，看到只Cannot GET / 几个字</strong><br> A:请看看本地博客目录中是否存在public目录，如果不存在执行hexo c，hexo g重新生成一次，如果还不行，请安装以下文件进行尝试<br> npm install hexo-renderer-ejs–save<br> npm install hexo-renderer-stylus–save<br> npm install hexo-renderer-marked–save</p></blockquote><p>如果还有更多问题请留言私信给我，或者请点击<a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">学习链接</a>进行更详细的教学。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开发环境准备&quot;&gt;&lt;a href=&quot;#开发环境准备&quot; class=&quot;headerlink&quot; title=&quot;开发环境准备&quot;&gt;&lt;/a&gt;开发环境准备&lt;/h2&gt;&lt;h3 id=&quot;node-js&quot;&gt;&lt;a href=&quot;#node-js&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.mgblog.cn/categories/hexo/"/>
    
    
      <category term="博客搭建" scheme="http://www.mgblog.cn/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo" scheme="http://www.mgblog.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
